
from flask import Flask, render_template, request, session
from src.common.database import Database
from src.models.user import User
from src.models.survey import Survey
from src.models.factor_data import factor_data
from src.models.price_data import price_data



app = Flask(__name__) #'  main  '

app.secret_key ="Leon19970309" #flask uses to make sure cookie is secure

@app.route('/')
def home_template():

    # factorNames=['AAPL','MSFT','GOOGL','AMZN','BERK','JPM','JNJ','WMT','V','PG',
    #      'XOM','BAC','MA','T','HD','INTC','VZ','DIS','UNH','KO',
    #      'CVX','WFC','MRK','CMCSA','PFE','CSCO','BA','PEP','ORCL','C',
    #      'MCD','ABT','NKE','MDT','ADBE','COST','PM','NVDA','UTX','HON',
    #      'AMGN','NFLX','IBM','UNP','TMO','CRM','ACN','NEE','AVGO','TXN',
    #      'LLY','RTN','LMT','SPG','SBUX','UPS','DHR','QCOM','AXP','AMT',
    #      'MMM','BMY','USB','MO','BKNG','LOW','CVS','GILD','FIS','SYK',
    #      'CAT','GE','GS','MDLZ','MS','CELG','CME','TJX','BLK','ADP',
    #      'TMUS','DUK','EL','CB','D','INTU','ANTM','BDX','CI','PNC',
    #      'SO','ISRG','COP','SPGI','CL','CCI','PLD','AGN','BSX','CSX']
    # factors = {'AGN': [35.1371407251, 39.7239620684, 41.670749595, 52.9051381025, 68.4699417913, 63.6552038595, 79.4954067593, 87.4724873564, 137.0855836848, 193.684327104, 229.448235538, 288.8299985895, 242.502641127, 260.2476650883, 227.7452512267, 230.2842673684, 199.9895699129, 162.9532461661, 186.041309984, 144.3488160848, 167.5685276409], 'AXP': [29.5054425491, 35.5982478258, 37.9419046359, 40.2210607422, 41.7895363394, 51.7903942621, 50.9537836281, 61.1819234312, 69.2479633319, 83.0103154179, 80.756185574, 72.353468257, 68.5382854157, 57.1010922069, 61.1579436478, 75.1335465479, 86.6047347245, 90.933627019, 105.9026265114, 108.1645767748, 118.1386484334], 'NFLX': [6.60856482, 10.5571323, 23.56997643, 33.91139466, 18.21283893, 16.43569785, 7.93570635, 27.03997296, 44.6285268, 51.26709159, 64.45422126, 59.25279789, 99.47, 104.13, 97.07, 146.47, 181.97, 295.35, 380.71, 356.56, 263.08], 'GOOGL': [250.0368397712, 282.0958027186, 266.0261973863, 291.7656526188, 270.5050230922, 325.2088886848, 379.4212370106, 398.3235867534, 439.5518544662, 561.8092513382, 588.41, 557.55, 624.25, 765.89, 810.73, 849.87, 959.9, 1037.14, 1207.36, 1176.89, 1225.95], 'AAPL': [23.0402018906, 28.88290278, 36.1877081847, 43.6195342298, 49.6225644991, 75.7972679092, 85.0402776409, 55.8280543852, 61.696221934, 69.4239941623, 92.1659304946, 113.6801304476, 104.6103819377, 101.1542571376, 107.4613138688, 138.2501743853, 149.1564024268, 163.5018224215, 220.8366845803, 187.9312223272, 218.1724542659], 'CCI': [25.4229635123, 30.6148055335, 35.0429024061, 33.4260376765, 34.3279069478, 43.062226467, 52.7390399995, 56.582140588, 59.0764997437, 60.903814971, 66.3389110425, 71.2974160863, 66.5475852538, 75.7093073944, 84.7760641817, 86.2145347985, 92.8688139527, 103.7545683165, 105.1437410869, 125.9023716353, 137.87], 'BA': [42.3829041791, 58.4052168658, 50.9559902288, 59.415554169, 51.3087889262, 61.2808179981, 58.6842859888, 72.789504422, 101.6563088759, 107.5509243273, 111.373477709, 131.7157455921, 114.8287848065, 119.1190669596, 121.4919731437, 167.0312787732, 243.3749949957, 315.9091755493, 357.5056886834, 374.7611903662, 380.6706457223], 'SPG': [44.7738763208, 55.925557052, 62.4550586468, 71.5975639767, 77.8476274213, 100.7547431738, 107.1729188318, 113.4679217738, 108.9158093604, 120.8021687881, 132.7724796747, 159.162159248, 150.0400326232, 175.3203846444, 183.2657763137, 148.9132649204, 143.5608714319, 141.7584353945, 165.0381819189, 175.1867195862, 155.8291077279], 'FIS': [22.0250084566, 20.5249766233, 23.9477589797, 28.3806784752, 22.0471139702, 29.3263059641, 28.4637634616, 35.9993250965, 42.7036000051, 48.9609240828, 52.571051232, 63.127208463, 62.469053046, 60.1930890901, 74.8881107109, 77.6299826535, 90.8011657384, 94.6159583527, 107.4970287738, 112.4783445004, 130.68], 'GS': [160.4347303315, 152.7612369479, 128.7805391662, 140.39251672, 88.6851107007, 111.0181418386, 104.307083061, 134.2113244172, 146.7262855763, 149.9671584445, 170.7261221358, 176.0066911764, 162.9978764087, 147.1865769229, 155.8749509639, 219.8571887649, 227.4786349943, 245.5049148789, 223.5067623918, 189.9589278088, 208.97], 'D': [23.1064651102, 28.0528455653, 30.8322196611, 31.7170079553, 37.0016356667, 37.6339178681, 39.9302086557, 44.9029726065, 49.1550768342, 56.9502470017, 56.316068105, 58.3648623518, 58.6277988653, 64.2787762386, 66.5198488749, 69.5116089317, 70.0217700473, 62.7738087375, 65.9565727135, 74.8626354187, 80.99], 'ACN': [29.9019886073, 34.6044872181, 34.3943656284, 45.2290047694, 45.0680930857, 54.8194581915, 56.1569453494, 66.0129867778, 65.0565388939, 70.1167729772, 73.2072619934, 85.7054907528, 88.4780098573, 107.4256581062, 109.2721894095, 115.0148729873, 131.2568157496, 148.8796839758, 166.4096926013, 173.8345705875, 190.562878796], 'GE': [11.9499076903, 13.3270654647, 12.0635370097, 14.7949793829, 11.9465438566, 15.3995068666, 17.8322645273, 18.4514474572, 19.5008172711, 21.3389094498, 21.475866551, 21.2228423618, 21.1175846587, 27.7686864588, 26.7604697827, 26.995950006, 22.574126809, 12.6767196982, 11.0442923343, 9.9698204409, 9.04], 'T': [15.4453178567, 15.5218349188, 17.4769994444, 18.7305770832, 18.3721222317, 20.6045610636, 25.7531432255, 25.4905571657, 24.1923131258, 25.6476912265, 26.445873921, 25.2516922405, 25.2874413259, 32.1631501295, 34.6029043485, 35.4338715718, 33.9849171358, 32.0688641676, 30.9644548856, 29.9891385965, 36.9217651757], 'MRK': [22.4115488073, 27.2124856724, 27.2401637362, 24.5841114973, 24.6550715418, 29.8317880265, 36.2240911429, 36.0902272169, 39.72564694, 47.327693039, 50.8655761921, 50.3285264018, 42.8871899839, 48.0558178089, 57.27802291, 59.1307311305, 60.8701341709, 52.242545045, 68.8257703844, 82.0746204864, 82.91], 'AMZN': [91.72, 135.12, 159.37, 174.62, 224.21, 204.61, 256.59, 266.49, 316.01, 338.29, 322.44, 370.56, 504.06, 593.86, 816.11, 874.32, 950.87, 1447.34, 2012.98, 1780.75, 1725.45], 'BMY': [16.0442192369, 19.5964913286, 20.5316137523, 20.4554789284, 24.3843865171, 26.7236519438, 27.4903125564, 34.1517409648, 38.9394802003, 44.3000461581, 44.3878457474, 57.3576397861, 51.0738702405, 57.7353071866, 50.6899531724, 51.5716780014, 58.8547591728, 59.8821314647, 59.4498701363, 46.4969433489, 49.807866293], 'SYK': [39.7360893704, 50.1736062493, 43.2542864716, 54.2617961881, 43.7992116711, 49.6567267719, 50.7047326343, 59.8002036703, 62.5044978291, 75.001771663, 75.750828492, 87.4683336288, 87.9537885916, 102.498394127, 113.3515322256, 128.1933445867, 137.4249728924, 158.2935445228, 173.1256372452, 196.5357515164, 213.61], 'JNJ': [44.7459241742, 48.3454327122, 47.1254561591, 45.7914997115, 50.2192024568, 52.5127185352, 56.3312893367, 67.6717709374, 73.0741626691, 83.2628697977, 92.3357782815, 88.0965110219, 81.4426953036, 98.6995537102, 109.3053803855, 116.0773436961, 122.13373625, 122.1332694546, 133.5917329055, 136.8677791615, 127.7155433287], 'WFC': [21.7927240568, 23.9937826959, 19.7619722548, 24.5909290873, 19.5966460744, 26.9613585867, 27.9745108283, 30.1824394114, 34.4377646722, 41.3808826741, 44.1621071277, 46.6851343387, 44.0315472963, 42.6252657663, 40.632028656, 50.931202862, 50.3023063845, 49.2593873265, 50.3884477711, 46.8959979089, 50.2355531095], 'CME': [41.1616536121, 42.8124831734, 36.4002901469, 41.0920845153, 36.540953368, 41.353098602, 41.6506763203, 46.3995419643, 57.2620175508, 59.0196658487, 64.7445157767, 79.171286865, 76.5077687645, 83.8125306102, 94.375087165, 109.8596294913, 126.0684322397, 156.5230738139, 167.7355077729, 163.4030491053, 213.89], 'NVDA': [13.4203132498, 16.1854876831, 11.0560891093, 17.669464629, 12.7566713858, 14.0378688732, 12.2358968675, 11.9750888438, 14.6882642149, 17.045343786, 17.7284133141, 20.7096908996, 22.769867712, 34.8402604928, 65.792510489, 106.4266515661, 174.5643034133, 230.3569200896, 266.2807713482, 179.1758929164, 171.76], 'HD': [21.1505650232, 26.0988580764, 25.6928249262, 31.1007322495, 28.3601264726, 42.3525456462, 51.3710785622, 60.4663621108, 66.5056343436, 69.6640790065, 82.0803332722, 102.8955308515, 104.1984826266, 122.1668969917, 118.1720753514, 138.5821676807, 153.447006266, 171.8013087056, 201.4895650823, 189.4230018234, 229.86], 'CRM': [14.29, 18.6925, 29.26, 31.85, 31.1875, 39.1025, 38.295, 44.7075, 52.43, 55.75, 57.53, 66.55, 69.04, 72.3, 70.05, 82.38, 93.21, 116.3, 160.43, 158.37, 148.26], 'MMM': [56.6929780309, 63.2024904059, 67.8035156219, 73.9294261052, 61.5133898488, 72.5802337052, 76.9026812613, 89.2104586872, 102.0293556925, 115.2040988627, 123.0881339945, 143.6994165112, 123.2515772034, 148.4445972405, 161.2476273137, 176.6603649424, 196.3804844717, 208.0344828748, 201.8130810165, 202.353118573, 163.107721215], 'LLY': [23.2357457829, 25.3624010487, 26.4083755449, 26.2061785556, 28.8499362145, 31.8114109247, 38.8149588128, 47.1795962159, 42.6993111337, 49.6351939037, 56.7845115281, 65.3610300927, 71.745376601, 65.3674271981, 74.6993707666, 79.0198771476, 80.2407920305, 74.3412396113, 103.7905902317, 127.5580147807, 111.7230713616], 'AVGO': [14.2857832195, 16.9617461361, 18.412973674, 26.1184030423, 29.2523031156, 32.7663048025, 30.0927372685, 31.2818571861, 37.6321690382, 57.0070558918, 77.9581531109, 115.6272975588, 109.6486205998, 140.7340560406, 156.9645661934, 205.4171624858, 225.1760306186, 223.6010128573, 237.1355677221, 295.0785721643, 274.14], 'RTN': [36.8622531892, 44.5731691885, 35.5748402623, 40.4144686893, 32.895005368, 43.7116571077, 48.4621615107, 50.4009608191, 68.7125582159, 87.2287156763, 91.5437243266, 99.5916645736, 97.0012719874, 113.6871312873, 130.6223530021, 144.1618075814, 176.9067891786, 208.6524555168, 200.7776051974, 179.2768783045, 194.5659970232], 'PG': [41.9217657751, 46.8264041818, 45.5482652579, 46.4147107541, 48.7023643846, 52.4212019212, 55.1421126254, 62.3137899199, 63.3946139611, 66.4921529465, 70.9287431125, 70.7485522349, 62.7042608449, 73.6307341341, 79.8380843085, 83.1531263552, 84.6988041207, 75.0216171695, 79.8807400585, 102.006225564, 123.778382956], 'TMO': [41.9737196785, 48.614826438, 45.929509357, 52.5802409089, 50.0585452988, 54.0794726315, 57.6141874008, 74.4553753229, 90.8444419171, 116.0552415899, 119.4835763223, 131.5638588166, 116.5269675842, 138.5507353228, 157.3860068909, 152.8329113209, 187.3728883651, 205.5852557015, 243.6468865362, 273.3625637391, 287.4], 'AMT': [31.5511685392, 37.0828106189, 44.9294188981, 43.7936115119, 47.3224176661, 54.412632767, 62.5912276989, 67.9665492556, 66.5439391996, 73.6167519174, 84.8981068506, 87.4190347367, 80.514940855, 94.5859530546, 105.5018255473, 114.6073399497, 128.8521327091, 140.3535627775, 140.7731910975, 194.4953456225, 218.98], 'PM': [31.0168122264, 34.2141366824, 37.0124914145, 44.474263211, 45.0513464511, 61.4677536948, 65.5143852783, 68.3027334693, 65.6700276279, 62.3188034114, 65.5990282252, 61.9162862471, 65.240223892, 83.5686342993, 85.7048996233, 99.8737560541, 100.0932716139, 91.0428738603, 76.8082841958, 85.7022006183, 75.13], 'EL': [15.4398223528, 27.684138191, 26.0761781055, 40.8367430646, 41.7216966803, 56.6877775774, 56.177651345, 59.2214409804, 65.480736613, 62.3979033697, 70.2358459167, 78.3999210398, 73.4254987403, 90.1830465708, 86.1698569318, 83.1327323931, 106.2140353804, 147.3874863188, 142.6187568877, 164.7732874694, 196.33], 'C': [43.3819614994, 38.5822551208, 35.7208917027, 41.0744103558, 24.9250258499, 33.7381587517, 30.4879370187, 40.9299893929, 45.2503569109, 43.7504690525, 48.0018546991, 47.2610840797, 45.5167426348, 38.8146218031, 43.3437141895, 55.8574904073, 68.4840983508, 64.4983705958, 70.4696912332, 60.9425134615, 68.9835427034], 'TMUS': [12.9100243704, 9.3671486596, 13.9567831032, 21.2169943136, 12.6416246954, 12.4000649878, 16.0368805849, 14.6277822908, 26.07, 32.6, 28.87, 32.38, 40.54, 38.43, 46.9, 64.74, 62.39, 61.04, 70.49, 69.1, 77.56], 'QCOM': [34.7594572484, 32.165116108, 34.7025679892, 42.2637290697, 40.9298000409, 54.2760211919, 51.1591243017, 54.3540543532, 55.3046818406, 65.6924624192, 62.6224621516, 56.7884296256, 45.2037756164, 44.4596022253, 56.5327075559, 52.1065167822, 47.8129973749, 52.2668332208, 68.9680901681, 56.0721500629, 76.63], 'CSX': [11.801507155, 14.2505249586, 15.596216283, 22.5223183773, 16.6518101833, 18.5692305703, 18.3883790105, 21.7430388532, 23.0951655776, 25.817051579, 29.2694345796, 30.5765492651, 24.2165653186, 24.4533676912, 28.3504051042, 45.6572885943, 52.3847774283, 54.6363142062, 73.2401809238, 74.3132136886, 68.91], 'BLK': [163.9379868212, 169.8348150691, 129.7308206004, 147.6839504433, 122.6248534599, 163.061801042, 148.7586655775, 216.681622214, 232.9339578299, 270.442350224, 289.0698650217, 322.019125551, 265.3557096045, 310.765466565, 334.9116757882, 355.5382988353, 415.7672061873, 519.0215396353, 463.307912258, 420.8340149338, 446.13], 'UPS': [41.778881927, 47.95477887, 50.8818921212, 56.796158768, 49.9867151142, 63.2930288258, 57.9405720546, 70.1900765033, 75.6271531814, 81.7383174135, 83.6659626634, 83.3237853369, 85.1246996267, 94.2612242158, 99.1827800844, 97.0012327318, 110.2024822406, 98.7835465807, 111.8744396885, 108.9122613574, 118.0341927981], 'BERK': [6.288421, 5.820135, 3.822748, 5.915703, 6.336206, 6.642025, 8.180682, 8.060188, 7.500319, 7.0761264535, 8.2668677326, 8.383875, 7.653125, 7.75, 8.02, 10.3, 11.55, 12.16, 13.22, 13.1, 13.1], 'ANTM': [42.8618196797, 55.8299554634, 48.6022419582, 60.5386080616, 58.9622829206, 63.4860620753, 51.9438069426, 59.9037259252, 76.6314214261, 91.5398575903, 111.0358987593, 146.1738532639, 128.5419735072, 133.5598477025, 121.4560769092, 159.98830006, 182.0920122599, 215.9380841066, 268.5997459552, 285.2457653842, 237.69], 'MA': [19.6486811191, 23.6016135181, 21.1896944627, 24.0173781754, 32.2950975596, 40.9390919607, 43.2881019376, 51.8672435257, 65.4949779857, 70.4871969903, 71.3737216386, 84.5318873148, 85.8995267215, 90.5422068736, 99.4186921329, 110.2462419018, 137.9274146878, 173.5112791326, 220.8182347089, 234.5460715282, 268.7978649963], 'MO': [10.7786921181, 12.8635261508, 15.4636527886, 17.2393690446, 18.0640976483, 21.4916201475, 24.4292145639, 25.450496691, 26.3661848861, 28.9309316643, 36.6575846912, 40.9903986193, 45.4452875388, 52.5805830864, 54.6614649882, 64.0662647084, 57.6230609523, 56.8772149259, 56.8781559949, 55.4381326915, 40.13], 'MDLZ': [13.5157512358, 16.1832436816, 17.0197802914, 17.2035770665, 19.3785666114, 21.4815240039, 23.7584146825, 27.1766518625, 28.478623222, 31.0571895812, 31.1855986795, 32.6221584278, 38.3500165008, 37.3786774049, 40.3944388609, 41.4799854877, 38.6309310429, 40.3729896321, 42.1464512336, 49.4270056086, 55.39], 'MS': [26.6360965334, 25.2980993781, 21.453195218, 23.5765215801, 13.0156821105, 17.2535307741, 14.8162929847, 19.3797341571, 23.9759985292, 27.4593777365, 30.9075732041, 32.2223707046, 28.180031965, 22.6947811595, 29.0673152175, 40.1011844012, 45.4859709961, 51.538964801, 46.1168601481, 41.3018163377, 42.5183093757], 'TJX': [8.0721756646, 9.5011709151, 9.9084147798, 11.004810656, 12.9357332224, 17.6733616414, 20.4088855806, 21.2916701712, 25.8619864339, 27.6559316315, 27.396786895, 32.3924490362, 32.3582622779, 37.0417821945, 35.6838884651, 38.0548740225, 35.7140966843, 39.6193975019, 54.7775531981, 52.5345772422, 54.6150536901], 'COP': [24.2639792669, 28.0068056313, 31.4512983649, 44.8494177789, 37.2225145717, 44.7413900662, 45.1714726677, 48.9436777888, 58.4721303581, 59.7032257431, 66.0747866115, 55.4840965079, 41.4403552765, 36.5739003909, 36.8314720248, 43.4045624097, 47.9955432592, 57.2798673062, 75.5053083183, 65.57447947, 57.4580955842], 'NEE': [39.988860343, 35.9286256988, 41.2230689842, 42.0591092212, 42.7893328447, 48.4993343813, 57.1515413579, 64.4445266255, 67.5518251216, 81.1764026703, 81.667217194, 91.3784640212, 87.4065492496, 108.2670154061, 117.0133246671, 122.3150557663, 138.8875069568, 157.2100440147, 161.5276743794, 191.0289266604, 231.26], 'PEP': [43.5814187406, 50.2716156399, 50.888526482, 49.9317359685, 49.3325561209, 53.0195016316, 57.6062962, 65.4738876174, 67.3168493598, 70.5936512683, 80.3803646237, 83.9629212602, 82.1390372879, 91.3284294336, 98.2473796053, 104.245142714, 104.4466168865, 104.0915982826, 107.7567813807, 120.8210680146, 135.6], 'AMGN': [49.5566493372, 49.105836285, 45.6468706846, 43.7944388701, 46.5801944693, 56.0496906604, 70.8005156655, 86.9962156939, 96.903396916, 104.1561700071, 122.6159065671, 143.2030542553, 117.6019472917, 134.5828167648, 156.4200972486, 150.6508198462, 173.2017189902, 161.9691059957, 201.3125743927, 185.7761777336, 193.6548761082], 'COST': [43.6952965803, 46.8056860344, 49.9459052374, 56.6874443871, 66.8904520179, 71.6656840284, 80.5046092582, 91.7352569736, 100.5788703373, 97.5570581008, 110.1600231, 137.3879039014, 131.7913466566, 143.2927804053, 139.6376199018, 156.2918817821, 160.672636493, 185.1561129913, 231.1743671607, 240.4411150963, 285.3257808302], 'VZ': [17.2047174514, 17.9136419776, 21.3626630006, 25.5963783596, 25.3024876724, 26.8222144358, 33.0359661882, 36.3003656197, 35.4271197819, 36.5501818213, 39.3780896531, 39.1340146865, 36.0651118056, 45.7005692442, 45.3004931639, 43.3528410834, 44.7957577873, 44.2902690375, 50.8429020981, 57.3125107818, 59.6802206067], 'MSFT': [20.1818033054, 23.3987415057, 19.7498664383, 20.6024905269, 21.0151716087, 26.6674024531, 25.3732144029, 24.4683695372, 28.8584481996, 35.486245186, 41.3590812976, 37.0446300271, 39.6557454658, 50.8131752747, 54.5457397831, 62.406895417, 71.1674177685, 88.8086725193, 112.2420975541, 116.7111577694, 137.262123493], 'IBM': [88.0902254808, 96.1982768804, 101.7658938323, 124.1319391745, 136.649215714, 161.4146148925, 160.9432299864, 168.1688173339, 148.7999018494, 153.2427337462, 154.5401562099, 132.3936701494, 119.5206429284, 127.7034121359, 136.5095431014, 154.0415756534, 131.6361164689, 141.4651334645, 142.7549837868, 136.2343229973, 141.5742990453], 'XOM': [49.6344883389, 48.9588421853, 45.5280241966, 62.1300013979, 55.1065612514, 65.8045523594, 71.1167706942, 70.712575957, 69.1423705591, 78.8170849189, 76.9198873401, 69.3643503567, 61.3311016692, 72.7022022533, 72.8239447622, 73.0537583035, 73.9238996161, 69.0559936623, 81.0140322204, 77.9479903814, 70.6119430486], 'BSX': [10.68, 7.19, 5.73, 7.31, 6.09, 6.0, 5.66, 7.81, 11.52, 13.2, 11.81, 17.83, 15.88, 18.55, 23.72, 24.71, 28.86, 27.32, 38.34, 38.38, 40.31], 'BDX': [58.759542987, 66.5945562812, 63.2325312268, 68.4140401021, 66.1930128969, 67.8367968454, 70.1185140584, 86.1693316574, 90.9397688994, 106.2169166821, 105.5994976354, 135.2928182484, 123.0854207473, 144.2749416207, 171.7146078986, 177.9040750111, 189.1548199631, 212.672265671, 256.7414137137, 248.1919228897, 248.03], 'MDT': [29.6844760028, 36.3868654767, 27.2531451517, 32.4312035262, 28.8338192355, 33.2545080977, 37.3517043125, 40.8322047786, 46.5893037633, 53.6412740106, 55.52141957, 70.2583232102, 59.1997142016, 69.94923012, 81.1146758206, 76.8008764867, 74.058583211, 77.6634551023, 95.6237616168, 90.128278463, 107.32], 'UNP': [24.0096065356, 30.1180910092, 33.7289996692, 41.1560326359, 36.0304135932, 45.6916940311, 50.9346532973, 61.8677063181, 68.6791358717, 81.843066728, 96.9510704286, 97.8216890235, 77.5518837529, 73.8148766324, 88.8278435335, 100.0292498637, 111.7528446148, 130.2009612412, 160.2914185662, 165.3446437112, 162.69], 'CI': [28.4426599708, 36.1924911124, 35.4855676272, 42.6133148346, 44.0782721032, 48.8462566651, 46.9011841616, 62.2541072146, 77.50571469, 79.3022447206, 90.5669383417, 128.8479838659, 132.8638692368, 137.9680627679, 131.6027657459, 147.1599550271, 184.3422570511, 167.698882216, 206.2994178208, 160.82, 149.48], 'DUK': [29.6094659301, 31.89682044, 35.416360719, 36.695286089, 41.5679846774, 44.7471582684, 46.7596343765, 54.2497282799, 51.09780261, 54.9920164295, 59.6726742488, 61.0393373318, 58.5813315182, 68.422459944, 70.7252405528, 73.2188941054, 76.1162751245, 71.7788414415, 74.8581124685, 87.1762457068, 95.2401479904], 'ADP': [26.8810966356, 30.8885857154, 29.6917668869, 36.2459984613, 34.8679393967, 40.5451182648, 43.6690168833, 49.311928313, 55.702856135, 59.8064121873, 65.338306049, 76.5905208561, 72.0180528238, 82.9410707986, 83.4861711535, 96.9464833972, 105.2107473813, 110.0773972982, 146.8470600268, 158.1971928954, 160.43], 'CL': [30.057225761, 33.7389116183, 31.7371127867, 32.7781126344, 37.6333282776, 40.4644487726, 45.4770823005, 50.5767019761, 51.9508614001, 56.1631929943, 57.7496424186, 61.5427176047, 56.2675794167, 64.5721830997, 68.0028551899, 68.8682119911, 69.171325648, 68.5741168334, 64.6343278723, 67.2872547999, 72.7932375167], 'GILD': [20.5488421217, 20.2835816813, 15.8537323254, 18.5903358696, 17.7061344014, 21.1191520687, 29.4638034252, 43.2728198553, 56.1821612915, 60.6120106474, 94.1232462934, 89.3043482915, 84.4594573345, 82.8866879358, 72.0793002546, 62.0306953884, 78.4515321401, 71.5302745468, 73.8046858355, 63.7986335404, 62.9], 'CB': [36.9951168872, 37.4718709864, 41.7527954896, 47.5291815575, 46.1722523667, 57.2315820065, 60.5765700299, 72.9183343962, 78.8925691529, 83.7343089011, 91.6883262938, 99.0387717925, 92.3037301912, 111.0135912742, 117.1028202639, 129.6126554076, 135.4066389067, 132.4677149969, 130.6068979772, 138.7236919948, 160.51], 'V': [16.1273078435, 20.9829362755, 17.0278980545, 16.9091902991, 21.0329386075, 28.0913111897, 31.7790350541, 40.4869952576, 46.1887260123, 50.9365226445, 51.4387381279, 63.4355915857, 65.2623040293, 73.4779223059, 80.3708354752, 87.5824818804, 102.3756721887, 118.2862233675, 148.8088774097, 155.473165825, 173.7100805332], 'UNH': [22.1937725994, 28.3817559254, 30.815556239, 39.0111493817, 43.6689818007, 51.6387668639, 50.3618861805, 51.6332049159, 65.4990888815, 74.8121011376, 79.7704870031, 109.9150231837, 105.8671127532, 122.982577974, 134.5920798183, 157.4456557825, 188.8478959764, 209.1706840966, 260.4535691635, 245.043591874, 215.26], 'JPM': [35.2422258236, 35.3097508771, 30.8369724751, 36.4009222996, 25.2569215774, 37.1027083743, 33.5452293462, 39.6882676385, 44.281680022, 51.599347549, 52.4584828555, 52.544345255, 53.62125622, 53.5214246676, 61.0895351008, 82.2970719158, 89.728801826, 104.8052048039, 110.2800257684, 98.9672594417, 116.7831532408], 'LMT': [56.5714489605, 61.6974627887, 53.5364695915, 60.6476436907, 57.1755888034, 70.6901619104, 74.6144977421, 79.8802626597, 109.1249069735, 137.9328940701, 159.5307380282, 179.2319559783, 180.1663014425, 201.6197575701, 227.5798084504, 251.7517854396, 294.6989363749, 324.9618696261, 336.9765403534, 296.5236592629, 387.87], 'SBUX': [8.6883707607, 10.4916979598, 11.2524890638, 15.9941769659, 17.4200783167, 24.5420371275, 22.6314882273, 25.4546735536, 34.7805796395, 33.377211271, 34.418119846, 43.6986061609, 51.5752206076, 55.4325241582, 50.8009530416, 54.4337147493, 52.4741688498, 55.8396898655, 55.9883498413, 73.3589879641, 87.9372793503], 'PLD': [16.4036796882, 20.6867973268, 18.8934719096, 26.5611432522, 20.316086345, 27.8072382066, 27.8301136571, 32.49577186, 31.5904805525, 33.9729314284, 32.1156115471, 37.2685047471, 33.5774414763, 39.4792434335, 49.3392598298, 47.1604088227, 59.4353674254, 60.3626608768, 64.6219836116, 71.0265984686, 85.78], 'SO': [19.7371630766, 21.1526710257, 24.4265595445, 25.1397598587, 28.8895571289, 31.2886698347, 32.7267498674, 34.1698900922, 30.696020815, 33.0955477815, 34.1045798594, 35.1611854633, 36.0868451962, 42.9032111517, 45.2509889412, 43.7827905392, 43.5457225645, 41.0727569179, 40.8403268263, 50.0473586417, 61.1603629417], 'CMCSA': [7.1858252659, 7.7253319722, 7.72597392, 10.4456117363, 9.5968076436, 12.9521005725, 15.7011709913, 18.5862041786, 19.9969546359, 22.3306777582, 24.5446481598, 25.6331013416, 25.3313652374, 28.3210500642, 31.1164269195, 35.2908220338, 36.8345755985, 32.9265487939, 34.326502436, 39.3917137254, 44.5996244131], 'LOW': [17.6011862583, 20.3361076241, 18.7961434332, 22.9485449352, 17.4270921561, 27.1964427779, 26.6516893054, 33.7068209058, 42.8144685269, 44.1759091314, 48.204171843, 67.6216152449, 62.0916669767, 70.5217307362, 67.1623508793, 77.9830873093, 75.8852196485, 84.7934537625, 111.723018066, 107.9002601931, 109.0069350557], 'ADBE': [32.68, 35.74, 26.88, 32.62, 25.56, 34.48, 32.82, 43.515, 52.03, 64.88, 69.19, 73.31, 80.52, 93.22, 109.7, 129.58, 146.43, 216.08, 269.91, 266.49, 277.54], 'USB': [17.4511686682, 20.9157944896, 17.6505582204, 21.7087073066, 19.7056241858, 26.2482548071, 28.7602345392, 28.9069619084, 31.4925441179, 36.9045379179, 36.9168919705, 38.2462623813, 36.504414705, 36.9227021005, 39.4731254465, 48.4475068104, 50.9674222992, 48.3523558553, 51.3418231666, 47.4895677435, 55.43], 'CVX': [48.4347794143, 52.3263680906, 56.7361817214, 77.3049034144, 68.4126264198, 79.3812976237, 88.5557905014, 91.2737088178, 95.7637717951, 94.1378285024, 96.4197101574, 85.8621853853, 63.8155118984, 82.2450730277, 87.2135058979, 97.0951503333, 107.6887526172, 106.5983246558, 116.5677535176, 119.558425462, 117.4415497004], 'CVS': [29.8143290459, 30.7820543907, 25.5512121137, 28.3960863135, 29.3444892101, 37.7425638599, 41.4103947467, 47.5739349918, 50.3835123842, 65.2357572035, 70.4323596826, 91.3309567897, 86.4218848572, 92.6382062358, 82.5709507972, 72.6039096751, 76.0743551984, 58.8359962228, 75.6326075608, 52.5472093463, 61.610408472], 'CAT': [38.9496614038, 48.596900499, 61.6920336086, 86.608335306, 61.3626341518, 84.5891955035, 70.086078088, 70.9572637837, 69.2944452312, 83.2999317841, 84.0178040874, 68.6654322648, 55.9448093918, 68.2527806178, 75.875123661, 86.4748514541, 117.7527416915, 140.8396529246, 147.3486988839, 132.6263023235, 125.6002649157], 'BAC': [15.5037549552, 16.3191967725, 11.9936717267, 12.1127805744, 5.8918956762, 8.6919078984, 8.2028234737, 11.1587968046, 12.7532156339, 15.5981126037, 15.7212257886, 14.2023441517, 14.4385553096, 12.6076130316, 14.4797177615, 22.2563767925, 24.4231181059, 29.0583780571, 29.2714430419, 27.2678096083, 29.35], 'DIS': [24.2146608209, 30.8127337754, 29.1739450337, 38.0404944053, 27.6046065596, 38.7527207567, 47.3754489046, 51.9601133662, 59.6352075764, 73.1517943485, 82.4497309893, 98.9082759465, 92.8832060238, 93.1654023197, 87.6811468465, 108.3864364838, 96.3072012134, 98.2572725995, 114.4283116335, 110.3483115886, 129.96], 'TXN': [18.4554765621, 19.5808369869, 21.3218106344, 28.1684879432, 22.7651680728, 27.2408541836, 23.1432901093, 29.6467102547, 34.0655593421, 40.1283366867, 41.567507, 50.1351989995, 42.0100902467, 52.0864952088, 63.7611649543, 74.9180109673, 83.6871818068, 99.0850845412, 103.5092574695, 103.9574438544, 126.1759255203], 'ISRG': [85.52991447, 115.92988407, 96.75323658, 111.76322157, 129.36320397, 181.22648544, 166.55316678, 163.72983627, 122.48654418, 144.99652167, 153.93984606, 165.74983425, 154.50317883, 201.02313231, 240.06309327, 255.22641144, 341.35965864, 412.83, 569.69, 570.58, 533.73], 'KO': [19.5952026989, 20.4426548845, 22.2257654462, 25.2812697471, 27.1387928529, 29.2077533165, 30.7340487999, 32.9000876259, 31.6861461459, 32.6204897445, 36.2589138735, 34.5796378636, 34.68337772, 41.4113484644, 38.5564562227, 39.0701301834, 41.7852767705, 41.3463566346, 44.5706506306, 46.1559927641, 54.31], 'ORCL': [18.5642437844, 22.5743838115, 23.8890975775, 29.4955441805, 26.8965884452, 26.2663045607, 28.0984623158, 29.3235687501, 30.7564584256, 36.2737347698, 35.2998120926, 39.5496923843, 33.1104382051, 38.3345607023, 37.2896869516, 42.5713625285, 46.4251213351, 44.4472185688, 50.6229731466, 53.0207875299, 53.8529797334], 'CELG': [27.555, 31.24, 28.82, 27.745, 31.985, 38.76, 38.37, 57.955, 77.305, 69.645, 94.78, 118.68, 104.79, 100.15, 107.4, 124.09, 142.97, 89.21, 89.25, 94.34, 98.85], 'INTC': [14.203856343, 16.5358405176, 14.4540969336, 15.4855606505, 17.5109773783, 22.240211131, 18.5236799313, 17.8892316225, 19.1906475073, 21.8022388994, 30.0909472045, 28.0370930848, 25.5928249563, 29.2738105813, 34.1635193334, 33.1690688518, 35.5273957419, 49.9066395123, 44.4843292602, 52.7277880518, 50.5038073038], 'HON': [28.3316073335, 34.6565796243, 34.3346752458, 47.2398556446, 36.2385318513, 49.3779306122, 49.6358679774, 62.8836011907, 70.4659685462, 77.3907084513, 80.0629373655, 89.4378695954, 80.3398075406, 99.2928243556, 104.1898919674, 113.6060809847, 127.8044836128, 133.645541164, 154.4454987724, 156.5614385955, 167.2023594572], 'INTU': [25.929778649, 31.5012390526, 41.2673574535, 47.4996830119, 44.7644355651, 55.2459963353, 54.6046684425, 61.2770249879, 62.4035899687, 73.3622690735, 83.087140883, 92.5419456189, 82.6156385602, 98.9195235139, 106.776630381, 115.0028826745, 141.6093409186, 170.9103126928, 220.6032721846, 259.962113705, 262.6626847617], 'ABT': [18.3422988819, 20.1486427708, 20.1120102473, 19.0046474273, 20.4884421344, 24.8391720553, 28.7005300814, 30.7854272124, 29.1085734315, 33.9797640045, 37.3059134004, 42.4104808767, 35.7660389672, 38.4420611593, 39.7191545354, 42.452859013, 50.1358120151, 58.1596777726, 71.5299647552, 78.9935551497, 81.512435272], 'UTX': [48.2593640656, 58.9436574563, 57.1557891495, 68.5355321214, 60.3253663568, 68.705371784, 66.2636077274, 80.0593668241, 94.7127840408, 100.5017929085, 93.4237321392, 104.5457395787, 78.5833649457, 91.8611835159, 95.1041598767, 105.3871471961, 111.4678575985, 121.045647504, 135.8441798706, 126.8071086179, 135.7165030737], 'WMT': [38.3914923317, 43.9337346181, 42.6467593668, 42.1956426525, 42.6067113431, 50.4487182535, 62.1083036294, 63.5769727787, 63.9432123832, 66.1681573985, 67.4117431076, 72.5568911395, 57.5181603177, 62.4416468254, 67.340512312, 66.8112475732, 75.8554335989, 86.0707342805, 92.1705734814, 96.54195208, 118.45], 'DHR': [24.6972024273, 28.388726393, 29.9706800598, 38.1775118628, 32.5436996472, 40.5356252698, 40.8837306394, 45.8631827401, 51.5989673216, 54.6450836957, 56.3490574667, 63.1004263733, 61.3752801357, 71.2907709733, 76.1188163843, 84.3607269977, 84.3422260181, 97.0939817611, 107.6113589659, 131.7052787375, 141.56], 'PFE': [11.4909995757, 12.0679016289, 12.2493793925, 14.8449890537, 13.1995489156, 17.012226762, 19.300923721, 22.7162890983, 23.1101326837, 25.9265453707, 24.4789823802, 29.0841676102, 26.3811338159, 26.1952076006, 30.0100770512, 31.0689421623, 32.7082535617, 33.3478816501, 42.0076818383, 41.3017443205, 35.8701422055], 'NKE': [13.2358894895, 16.4265499011, 17.6976649925, 17.2019094136, 20.5566190319, 24.6499428541, 22.0956280316, 27.3267407568, 34.3296371744, 34.4967456955, 42.101951739, 47.415528467, 58.2884699254, 58.9851836922, 53.3869864534, 55.0449049601, 51.5015728489, 65.380942157, 83.6240743253, 83.752465891, 92.31], 'MCD': [42.3581233262, 50.5511220969, 57.2378402256, 58.6312009478, 70.8041214958, 78.1586490499, 75.839364874, 82.4390298845, 81.6079371523, 83.092556956, 82.3663016341, 85.7041061249, 86.3231306692, 113.2435757147, 108.3809984479, 121.2931388801, 146.7808423181, 150.8356436065, 162.6514416667, 187.7960129098, 213.16], 'CSCO': [18.1726750869, 20.6762925559, 17.2445427541, 13.6490048936, 12.6249629357, 16.6386945679, 14.9974452458, 16.920867776, 19.1784402753, 18.6335486221, 21.4979891008, 23.3315077922, 22.4064157113, 24.93399641, 28.4499903996, 31.0097089694, 31.3271670986, 40.7812033793, 46.680976017, 52.9254261924, 48.4794431555], 'BKNG': [167.0, 255.67, 345.16, 491.69, 511.12, 720.04, 630.52, 688.162, 1014.97, 1192.01, 1158.58, 1135.19, 1199.14, 1307.89, 1453.49, 1785.05, 1818.99, 2080.39, 1969.34, 1744.91, 1944.25], 'SPGI': [20.9344388568, 28.9694316236, 27.1493909418, 33.5570296287, 37.0048490742, 40.8188012138, 47.5325567584, 47.7778270075, 61.0750373231, 70.0200205422, 79.4308103219, 98.2785055707, 81.5065731341, 95.4997791163, 122.5652627778, 124.7272253903, 151.299019871, 187.7294029426, 201.4656898826, 209.0794013264, 245.8229393439], 'PNC': [38.2839285004, 47.6325540541, 41.3557118525, 50.0150449513, 40.1384324166, 52.8405751943, 53.4314092865, 56.3945616458, 62.3730234404, 74.4903161789, 75.2110029595, 81.8254296948, 78.4911410677, 76.7881716224, 81.5166645245, 111.0637542774, 126.3374385952, 143.7465994464, 132.0930600998, 119.8032461734, 139.2579019704]}
    # for i in range(0,100):
    #     new_price = price_data(factorNames[i], factors[factorNames[i]])
    #     price_data.save_to_mongo(new_price)

    return render_template('home.html')


@app.route('/login')  #127.0.0.1:5000/login  define route
def login_template(): # defined the method, access the end point
    return render_template('login.html')

@app.route('/register')  #127.0.0.1:5000/register
def register_template():
    return render_template('register.html')

@app.before_first_request
def initialize_database():
    Database.initialize()

@app.route('/auth/login', methods=['POST'])   #define a new end point to login user, get the email and passwords and log user in
def login_user():
    email = request.form['email'] #website is going to make a request to form from login.htmal for email and password (from Id)
    password = request.form['password']

    if User.login_valid(email, password):
        User.login(email)
        return render_template("choose_extract.html")  # give a render_template with data you want, by variable email.
    else:
        return render_template('login_wrong_password.html')



@app.route('/auth/register', methods =['POST'])
def register_user():
    email = request.form['email']
    password = request.form['password']
    if User.duplicate_register(email):
        return render_template('register_duplicate_address.html')
    else:
        User.register(email, password)
        return render_template("choose_function.html", email=session['email'])

@app.route('/extract_existing_info', methods = ['POST'])
def extract_existing():
    answer_q17 = request.form.get('q17')
    if(answer_q17 == 'Yes'):
        if Survey.survey_not_empty(session.get('email',None)):
            existing_survey = Survey.get_by_email(session.get('email', None))
            answer_q9 = existing_survey[0].get('name')
            answer_q13 = existing_survey[0].get('num_asset')
            answer_q14 = existing_survey[0].get('inv_time')
            answer_q15 = existing_survey[0].get('reb_time')
            answer_q1 = existing_survey[0].get('age')
            answer_q2 = existing_survey[0].get('gender')
            answer_q3 = existing_survey[0].get('employment')
            answer_q4 = existing_survey[0].get('house')
            answer_q5 = existing_survey[0].get('car')
            answer_q6 = existing_survey[0].get('education')
            answer_q7 = existing_survey[0].get('income')
            answer_q8 = existing_survey[0].get('protect')
            return render_template("existing_results.html", existing_survey = existing_survey,
                                   answer_q9 = answer_q9,answer_q13 = answer_q13,answer_q14 = answer_q14,answer_q15 = answer_q15,answer_q1 = answer_q1,
                                   answer_q2 = answer_q2,answer_q3 = answer_q3,answer_q4 = answer_q4,answer_q5 = answer_q5,answer_q6 = answer_q6,
                                   answer_q7 = answer_q7,answer_q8 = answer_q8)

        else:
            return render_template("force_input_survey.html")

    else:
        return render_template("choose_function.html")

@app.route('/directed_choose_function',methods =['POST'])
def directed_choose_function():
    return render_template("choose_function.html")


@app.route('/existing_choose_function', methods= ['POST'])
def existing_choose_function():
    return render_template("existing_choose_function.html")



@app.route('/choose_function',methods = ['POST'])
def choose_function():
    answer_q16 = request.form.get('q16')
    session['answer_q16'] = request.form.get('q16')
    return render_template("survey.html", answer_q16 = answer_q16)

@app.route('/survey/confirm', methods =['POST'])
def confirm_survey():
    answer_q9 = request.form.get('name')
    answer_q13 = request.form.get('assets')
    answer_q14 = request.form.get('horizon')
    answer_q15 = request.form.get('rebalance')
    answer_q1 = request.form.get('q1')
    answer_q2 = request.form.get('q2')
    answer_q3 = request.form.get('q3')
    answer_q4 = request.form.get('q4')
    answer_q5 = request.form.get('q5')
    answer_q6 = request.form.get('q6')
    answer_q7 = request.form.get('q7')
    answer_q8 = request.form.get('q8')

# delete q10, q11


    rw = User.find_risklevel(answer_q1, answer_q2, answer_q3,answer_q4,answer_q5,answer_q6,answer_q7, answer_q8)

    #Save to database, using survey Object

    new_survey = Survey(session.get('email',None), answer_q1,answer_q2,answer_q3,answer_q4,answer_q5,answer_q6,answer_q7,
                        answer_q8,answer_q9, answer_q13, answer_q14,answer_q15, rw)

    #need to get num_assets, inv_time, reb_time, risk_measure,return goal (starting from answer_q_13, the userf info beforehand is only for storage purpose)
    if(Database.find_one("surveys", {"email":session.get('email',None)})):
        Database.replace_data('surveys', {"email": session.get('email', None)}, Survey.json(new_survey))
    else:
        Survey.save_to_mongo(new_survey)


    return render_template("survey_results.html", answer_q1=answer_q1, answer_q2=answer_q2, answer_q3=answer_q3,
                           answer_q4=answer_q4, answer_q5=answer_q5, answer_q6=answer_q6, answer_q7=answer_q7,
                           answer_q8=answer_q8, answer_q9=answer_q9
                           , answer_q13 = answer_q13, answer_q14 =answer_q14, answer_q15=answer_q15,  rw = rw)


@app.route('/portfolio', methods=['POST'])
def portfolio_options():
    if (session.get('answer_q16', None) == "Get the risk and return profile for given portfolio"):
        return render_template("given_portfolio_ask.html")
    elif (session.get('answer_q16', None) == "Get the optimal portfolio without return"):
        stock = ['AAPL', 'MSFT', 'GOOG', 'GOOGL', 'AMZN']
        weight = [0.5, 0.2, 0.1, 0, 0.1]

        num_asset = Database.find_one("surveys", {"email": session.get('email', None)})['num_asset']
        inv_time = Database.find_one("surveys", {"email": session.get('email', None)})['inv_time']
        inv_time = float(inv_time)

        sr = 1.5  # input sharpe ratio from portfolio
        # sp500_sr_1y = 5.4
        # sp500_sr_3y = 1.07
        # sp500_sr_5y = 0.83
        # sp500_sr_10y = 1.04
        sp500_sr_input = 0
        if (inv_time <= 3):
            sp500_sr_input = 5.4 - ((5.4 - 1.07) / (3 - 1)) * (inv_time - 1)
        elif (inv_time >= 10):
            sp500_sr_input = 1.07 - ((1.07 - 0.89) / (5 - 3)) * (inv_time - 3)
        else:
            sp500_sr_input = 0.89 + ((0.89 - 1.04) / (10 - 5)) * (inv_time - 5)

        if (sr >= sp500_sr_input):
            return render_template("function2_results_outperform.html", weight=weight, stock=stock, sr=sr,
                                   inv_time=inv_time,sp500_sr_input=round(sp500_sr_input,2))
        else:
            return render_template("function2_results_underperform.html", weight=weight, stock=stock, sr=sr,
                                   inv_time=inv_time, sp500_sr_input=round(sp500_sr_input,2))
    elif (session.get('answer_q16', None) == "Get the optimal portfolio with return"):
        return render_template("portfolio_with_return_ask.html")
    else:
        pass

@app.route('/existing_portfolio',methods = ['POST'])
def existing_portfolio_options():
    e_answer_q16 = request.form.get('e_q16')
    if (e_answer_q16 == "Get the risk and return profile for given portfolio"):
        return render_template("given_portfolio_ask.html") #given_portfolio_ask.thml
    elif (e_answer_q16 == "Get the optimal portfolio without return"):
        stock = ['AAPL', 'MSFT', 'GOOG', 'GOOGL', 'AMZN']
        weight = [0.5, 0.2, 0.1, 0, 0.1]

        num_asset = Database.find_one("surveys", {"email": session.get('email', None)})['num_asset']
        inv_time = Database.find_one("surveys", {"email": session.get('email', None)})['inv_time']
        inv_time = float(inv_time)

        sr = 1.5  # input sharpe ratio from portfolio
        # sp500_sr_1y = 5.4
        # sp500_sr_3y = 1.07
        # sp500_sr_5y = 0.83
        # sp500_sr_10y = 1.04
        sp500_sr_input = 0
        if (inv_time <= 3):
            sp500_sr_input = 5.4 - ((5.4 - 1.07) / (3 - 1)) * (inv_time - 1)
        elif (inv_time >= 10):
            sp500_sr_input = 1.07 - ((1.07 - 0.89) / (5 - 3)) * (inv_time - 3)
        else:
            sp500_sr_input = 0.89 + ((0.89 - 1.04) / (10 - 5)) * (inv_time - 5)

        if(sr>=sp500_sr_input):
            return render_template("function2_results_outperform.html", weight=weight, stock=stock, sr=sr, inv_time = inv_time, sp500_sr_input=round(sp500_sr_input,2))
        else:
            return render_template("function2_results_underperform.html", weight=weight, stock=stock, sr=sr, inv_time = inv_time, sp500_sr_input=round(sp500_sr_input,2))

    elif (e_answer_q16 == "Get the optimal portfolio with return"):
        return render_template("portfolio_with_return_ask.html")
    else:
        pass



@app.route('/portfoilo/with_return',methods=['POST'])
def store_investor_expected_return():
    updated_survey = Database.find_one("surveys", {"email":session.get('email',None)})
    updated_survey["ret_goal"]= request.form.get('goal') #change 10 to user inputed return goal
    Database.replace_data('surveys',{"email":session.get('email',None)}, updated_survey)

    ret_goal = Database.find_one("surveys", {"email": session.get('email', None)})['ret_goal']
    stock = ['AAPL', 'MSFT', 'GOOG', 'GOOGL', 'AMZN']
    weight = [0.5, 0.2, 0.1, 0, 0.1]

    num_asset = Database.find_one("surveys", {"email": session.get('email', None)})['num_asset']
    inv_time = Database.find_one("surveys", {"email": session.get('email', None)})['inv_time']
    inv_time = float(inv_time)

    sr = 1.1  # input sharpe ratio from portfolio
    # sp500_sr_1y = 5.4
    # sp500_sr_3y = 1.07
    # sp500_sr_5y = 0.83
    # sp500_sr_10y = 1.04
    sp500_sr_input = 0
    if (inv_time <= 3):
        sp500_sr_input = 5.4 - ((5.4 - 1.07) / (3 - 1)) * (inv_time - 1)
    elif (inv_time >= 10):
        sp500_sr_input = 1.07 - ((1.07 - 0.89) / (5 - 3)) * (inv_time - 3)
    else:
        sp500_sr_input = 0.89 + ((0.89 - 1.04) / (10 - 5)) * (inv_time - 5)

    if (sr >= sp500_sr_input):
        return render_template("function3_results_outperform.html", weight=weight, stock=stock, sr=sr,
                               inv_time=inv_time, sp500_sr_input=round(sp500_sr_input, 2), ret_goal = ret_goal)
    else:
        return render_template("function3_results_underperform.html", weight=weight, stock=stock, sr=sr,
                               inv_time=inv_time, sp500_sr_input=round(sp500_sr_input, 2), ret_goal = ret_goal)




@app.route('/portfolio/input_weight_portfolio',methods=['POST'])
def input_weight_portfolio():
    input_portfolio = request.form.getlist('input_portfolio')

    session['input_portfolio'] = request.form.getlist('input_portfolio')
    return render_template("given_portfolio_ask_weights.html", input_portfolio = input_portfolio)

# add
@app.route('/portfolio/input_portfolio_confirm',methods=['POST'])
def input_confirm_portfolio():
    input_weight = request.form.get('input_weight')
    input_weight = input_weight.split(",")
    input_portfolio = session.get('input_portfolio',None)

    input_backtest_period = request.form.get('input_backtest_period')
    if (input_backtest_period == ""):
        input_backtest_period = 10
    session['input_backtest_period'] = input_backtest_period


    temp= 0
    given_portfolio = {}
    for i in input_portfolio:
        given_portfolio[i]= float(input_weight[temp])
        temp = temp + 1

    return render_template("given_portfolio_results.html", input_portfolio = session.get('input_portfolio',None),input_weight=input_weight,given_portfolio=given_portfolio)



@app.route('/function1/results', methods=['GET', 'POST'])
def function1_results():
    time = float(session.get('input_backtest_period',None))
    sr = 5.7#input sharpe ratio from portfolio
    # sp500_sr_1y = 5.4
    # sp500_sr_3y = 1.07
    # sp500_sr_5y = 0.83
    # sp500_sr_10y = 1.04
    sp500_sr_input = 0
    if(time<=3):
        sp500_sr_input = 5.4-((5.4-1.07)/(3-1))*(time-1)
    elif(time>=10):
        sp500_sr_input = 1.07-((1.07-0.89)/(5-3))*(time-3)
    else:
        sp500_sr_input = 0.89+((0.89-1.04)/(10-5))*(time-5)

    retr = 1
    risk = 2
    if(sr>=sp500_sr_input):
        return render_template("function1_results_outperform.html", retr = retr, risk = risk, sr = sr, sp500_sr_input =round(sp500_sr_input,2) ,time=time)
    else:
        return render_template("function1_results_underperform.html", retr = retr, risk = risk, sr = sr, sp500_sr_input = round(sp500_sr_input,2) ,time=time)

# @app.route('/function2/results', methods=['GET', 'POST'])
# def function2_results():


if __name__ == '__main__': #execute

    app.run(port=5000, debug=True) # need this to update





