
from flask import Flask, render_template, request, session
from src.common.database import Database
from src.models.user import User
from src.models.survey import Survey
from src.models.factor_data import factor_data
from src.models.price_data import price_data



app = Flask(__name__) #'  main  '

app.secret_key ="Leon19970309" #flask uses to make sure cookie is secure

@app.route('/')
def home_template():

    factorNames=['AAPL','MSFT','GOOGL','AMZN','BERK','JPM','JNJ','WMT','V','PG',
         'XOM','BAC','MA','T','HD','INTC','VZ','DIS','UNH','KO',
         'CVX','WFC','MRK','CMCSA','PFE','CSCO','BA','PEP','ORCL','C',
         'MCD','ABT','NKE','MDT','ADBE','COST','PM','NVDA','UTX','HON',
         'AMGN','NFLX','IBM','UNP','TMO','CRM','ACN','NEE','AVGO','TXN',
         'LLY','RTN','LMT','SPG','SBUX','UPS','DHR','QCOM','AXP','AMT',
         'MMM','BMY','USB','MO','BKNG','LOW','CVS','GILD','FIS','SYK',
         'CAT','GE','GS','MDLZ','MS','CELG','CME','TJX','BLK','ADP',
         'TMUS','DUK','EL','CB','D','INTU','ANTM','BDX','CI','PNC',
         'SO','ISRG','COP','SPGI','CL','CCI','PLD','AGN','BSX','CSX']
    factors = {'AGN': [167.5685276409, 144.3488160848, 186.041309984, 162.9532461661, 199.9895699129, 230.2842673684, 227.7452512267, 260.2476650883, 242.502641127, 288.8299985895, 229.448235538, 193.684327104, 137.0855836848, 87.4724873564, 79.4954067593, 63.6552038595, 68.4699417913, 52.9051381025, 41.670749595, 39.7239620684, 35.1371407251], 'AXP': [118.1386484334, 108.1645767748, 105.9026265114, 90.933627019, 86.6047347245, 75.1335465479, 61.1579436478, 57.1010922069, 68.5382854157, 72.353468257, 80.756185574, 83.0103154179, 69.2479633319, 61.1819234312, 50.9537836281, 51.7903942621, 41.7895363394, 40.2210607422, 37.9419046359, 35.5982478258, 29.5054425491], 'NFLX': [263.08, 356.56, 380.71, 295.35, 181.97, 146.47, 97.07, 104.13, 99.47, 59.25279789, 64.45422126, 51.26709159, 44.6285268, 27.03997296, 7.93570635, 16.43569785, 18.21283893, 33.91139466, 23.56997643, 10.5571323, 6.60856482], 'GOOGL': [1225.95, 1176.89, 1207.36, 1037.14, 959.9, 849.87, 810.73, 765.89, 624.25, 557.55, 588.41, 561.8092513382, 439.5518544662, 398.3235867534, 379.4212370106, 325.2088886848, 270.5050230922, 291.7656526188, 266.0261973863, 282.0958027186, 250.0368397712], 'AAPL': [218.1724542659, 187.9312223272, 220.8366845803, 163.5018224215, 149.1564024268, 138.2501743853, 107.4613138688, 101.1542571376, 104.6103819377, 113.6801304476, 92.1659304946, 69.4239941623, 61.696221934, 55.8280543852, 85.0402776409, 75.7972679092, 49.6225644991, 43.6195342298, 36.1877081847, 28.88290278, 23.0402018906], 'CCI': [137.87, 125.9023716353, 105.1437410869, 103.7545683165, 92.8688139527, 86.2145347985, 84.7760641817, 75.7093073944, 66.5475852538, 71.2974160863, 66.3389110425, 60.903814971, 59.0764997437, 56.582140588, 52.7390399995, 43.062226467, 34.3279069478, 33.4260376765, 35.0429024061, 30.6148055335, 25.4229635123], 'BA': [380.6706457223, 374.7611903662, 357.5056886834, 315.9091755493, 243.3749949957, 167.0312787732, 121.4919731437, 119.1190669596, 114.8287848065, 131.7157455921, 111.373477709, 107.5509243273, 101.6563088759, 72.789504422, 58.6842859888, 61.2808179981, 51.3087889262, 59.415554169, 50.9559902288, 58.4052168658, 42.3829041791], 'SPG': [155.8291077279, 175.1867195862, 165.0381819189, 141.7584353945, 143.5608714319, 148.9132649204, 183.2657763137, 175.3203846444, 150.0400326232, 159.162159248, 132.7724796747, 120.8021687881, 108.9158093604, 113.4679217738, 107.1729188318, 100.7547431738, 77.8476274213, 71.5975639767, 62.4550586468, 55.925557052, 44.7738763208], 'FIS': [130.68, 112.4783445004, 107.4970287738, 94.6159583527, 90.8011657384, 77.6299826535, 74.8881107109, 60.1930890901, 62.469053046, 63.127208463, 52.571051232, 48.9609240828, 42.7036000051, 35.9993250965, 28.4637634616, 29.3263059641, 22.0471139702, 28.3806784752, 23.9477589797, 20.5249766233, 22.0250084566], 'GS': [208.97, 189.9589278088, 223.5067623918, 245.5049148789, 227.4786349943, 219.8571887649, 155.8749509639, 147.1865769229, 162.9978764087, 176.0066911764, 170.7261221358, 149.9671584445, 146.7262855763, 134.2113244172, 104.307083061, 111.0181418386, 88.6851107007, 140.39251672, 128.7805391662, 152.7612369479, 160.4347303315], 'D': [80.99, 74.8626354187, 65.9565727135, 62.7738087375, 70.0217700473, 69.5116089317, 66.5198488749, 64.2787762386, 58.6277988653, 58.3648623518, 56.316068105, 56.9502470017, 49.1550768342, 44.9029726065, 39.9302086557, 37.6339178681, 37.0016356667, 31.7170079553, 30.8322196611, 28.0528455653, 23.1064651102], 'ACN': [190.562878796, 173.8345705875, 166.4096926013, 148.8796839758, 131.2568157496, 115.0148729873, 109.2721894095, 107.4256581062, 88.4780098573, 85.7054907528, 73.2072619934, 70.1167729772, 65.0565388939, 66.0129867778, 56.1569453494, 54.8194581915, 45.0680930857, 45.2290047694, 34.3943656284, 34.6044872181, 29.9019886073], 'GE': [9.04, 9.9698204409, 11.0442923343, 12.6767196982, 22.574126809, 26.995950006, 26.7604697827, 27.7686864588, 21.1175846587, 21.2228423618, 21.475866551, 21.3389094498, 19.5008172711, 18.4514474572, 17.8322645273, 15.3995068666, 11.9465438566, 14.7949793829, 12.0635370097, 13.3270654647, 11.9499076903], 'T': [36.9217651757, 29.9891385965, 30.9644548856, 32.0688641676, 33.9849171358, 35.4338715718, 34.6029043485, 32.1631501295, 25.2874413259, 25.2516922405, 26.445873921, 25.6476912265, 24.1923131258, 25.4905571657, 25.7531432255, 20.6045610636, 18.3721222317, 18.7305770832, 17.4769994444, 15.5218349188, 15.4453178567], 'MRK': [82.91, 82.0746204864, 68.8257703844, 52.242545045, 60.8701341709, 59.1307311305, 57.27802291, 48.0558178089, 42.8871899839, 50.3285264018, 50.8655761921, 47.327693039, 39.72564694, 36.0902272169, 36.2240911429, 29.8317880265, 24.6550715418, 24.5841114973, 27.2401637362, 27.2124856724, 22.4115488073], 'AMZN': [1725.45, 1780.75, 2012.98, 1447.34, 950.87, 874.32, 816.11, 593.86, 504.06, 370.56, 322.44, 338.29, 316.01, 266.49, 256.59, 204.61, 224.21, 174.62, 159.37, 135.12, 91.72], 'BMY': [49.807866293, 46.4969433489, 59.4498701363, 59.8821314647, 58.8547591728, 51.5716780014, 50.6899531724, 57.7353071866, 51.0738702405, 57.3576397861, 44.3878457474, 44.3000461581, 38.9394802003, 34.1517409648, 27.4903125564, 26.7236519438, 24.3843865171, 20.4554789284, 20.5316137523, 19.5964913286, 16.0442192369], 'SYK': [213.61, 196.5357515164, 173.1256372452, 158.2935445228, 137.4249728924, 128.1933445867, 113.3515322256, 102.498394127, 87.9537885916, 87.4683336288, 75.750828492, 75.001771663, 62.5044978291, 59.8002036703, 50.7047326343, 49.6567267719, 43.7992116711, 54.2617961881, 43.2542864716, 50.1736062493, 39.7360893704], 'JNJ': [128.6, 137.8156169674, 134.5168834104, 122.9790677196, 122.9795377476, 116.881203417, 110.0623428536, 99.3830686251, 82.0067028888, 88.7065976633, 92.9752227294, 83.8394824695, 73.5802164272, 68.1404120104, 56.7213952185, 52.8763800209, 50.5669808672, 46.1086153605, 47.4518097336, 48.6802348778, 45.0557989953], 'WFC': [50.2355531095, 46.8959979089, 50.3884477711, 49.2593873265, 50.3023063845, 50.931202862, 40.632028656, 42.6252657663, 44.0315472963, 46.6851343387, 44.1621071277, 41.3808826741, 34.4377646722, 30.1824394114, 27.9745108283, 26.9613585867, 19.5966460744, 24.5909290873, 19.7619722548, 23.9937826959, 21.7927240568], 'CME': [213.89, 163.4030491053, 167.7355077729, 156.5230738139, 126.0684322397, 109.8596294913, 94.375087165, 83.8125306102, 76.5077687645, 79.171286865, 64.7445157767, 59.0196658487, 57.2620175508, 46.3995419643, 41.6506763203, 41.353098602, 36.540953368, 41.0920845153, 36.4002901469, 42.8124831734, 41.1616536121], 'NVDA': [171.76, 179.1758929164, 266.2807713482, 230.3569200896, 174.5643034133, 106.4266515661, 65.792510489, 34.8402604928, 22.769867712, 20.7096908996, 17.7284133141, 17.045343786, 14.6882642149, 11.9750888438, 12.2358968675, 14.0378688732, 12.7566713858, 17.669464629, 11.0560891093, 16.1854876831, 13.4203132498], 'HD': [229.86, 189.4230018234, 201.4895650823, 171.8013087056, 153.447006266, 138.5821676807, 118.1720753514, 122.1668969917, 104.1984826266, 102.8955308515, 82.0803332722, 69.6640790065, 66.5056343436, 60.4663621108, 51.3710785622, 42.3525456462, 28.3601264726, 31.1007322495, 25.6928249262, 26.0988580764, 21.1505650232], 'CRM': [148.26, 158.37, 160.43, 116.3, 93.21, 82.38, 70.05, 72.3, 69.04, 66.55, 57.53, 55.75, 52.43, 44.7075, 38.295, 39.1025, 31.1875, 31.85, 29.26, 18.6925, 14.29], 'MMM': [164.53, 204.1176122798, 203.5728656638, 209.8485173628, 198.0928975614, 178.2008210737, 162.6536863141, 149.7390154313, 124.3263154326, 144.9524573237, 124.1614470196, 116.2086640944, 102.9190388231, 89.9883626505, 77.5732629557, 73.2131242013, 62.0497788605, 74.5740813892, 68.394753738, 63.7536081616, 57.1873336586], 'LLY': [111.7230713616, 127.5580147807, 103.7905902317, 74.3412396113, 80.2407920305, 79.0198771476, 74.6993707666, 65.3674271981, 71.745376601, 65.3610300927, 56.7845115281, 49.6351939037, 42.6993111337, 47.1795962159, 38.8149588128, 31.8114109247, 28.8499362145, 26.2061785556, 26.4083755449, 25.3624010487, 23.2357457829], 'AVGO': [274.14, 295.0785721643, 237.1355677221, 223.6010128573, 225.1760306186, 205.4171624858, 156.9645661934, 140.7340560406, 109.6486205998, 115.6272975588, 77.9581531109, 57.0070558918, 37.6321690382, 31.2818571861, 30.0927372685, 32.7663048025, 29.2523031156, 26.1184030423, 18.412973674, 16.9617461361, 14.2857832195], 'RTN': [194.5659970232, 179.2768783045, 200.7776051974, 208.6524555168, 176.9067891786, 144.1618075814, 130.6223530021, 113.6871312873, 97.0012719874, 99.5916645736, 91.5437243266, 87.2287156763, 68.7125582159, 50.4009608191, 48.4621615107, 43.7116571077, 32.895005368, 40.4144686893, 35.5748402623, 44.5731691885, 36.8622531892], 'PG': [123.778382956, 102.006225564, 79.8807400585, 75.0216171695, 84.6988041207, 83.1531263552, 79.8380843085, 73.6307341341, 62.7042608449, 70.7485522349, 70.9287431125, 66.4921529465, 63.3946139611, 62.3137899199, 55.1421126254, 52.4212019212, 48.7023643846, 46.4147107541, 45.5482652579, 46.8264041818, 41.9217657751], 'TMO': [287.4, 273.3625637391, 243.6468865362, 205.5852557015, 187.3728883651, 152.8329113209, 157.3860068909, 138.5507353228, 116.5269675842, 131.5638588166, 119.4835763223, 116.0552415899, 90.8444419171, 74.4553753229, 57.6141874008, 54.0794726315, 50.0585452988, 52.5802409089, 45.929509357, 48.614826438, 41.9737196785], 'AMT': [218.98, 194.4953456225, 140.7731910975, 140.3535627775, 128.8521327091, 114.6073399497, 105.5018255473, 94.5859530546, 80.514940855, 87.4190347367, 84.8981068506, 73.6167519174, 66.5439391996, 67.9665492556, 62.5912276989, 54.412632767, 47.3224176661, 43.7936115119, 44.9294188981, 37.0828106189, 31.5511685392], 'PM': [75.13, 85.7022006183, 76.8082841958, 91.0428738603, 100.0932716139, 99.8737560541, 85.7048996233, 83.5686342993, 65.240223892, 61.9162862471, 65.5990282252, 62.3188034114, 65.6700276279, 68.3027334693, 65.5143852783, 61.4677536948, 45.0513464511, 44.474263211, 37.0124914145, 34.2141366824, 31.0168122264], 'EL': [196.33, 164.7732874694, 142.6187568877, 147.3874863188, 106.2140353804, 83.1327323931, 86.1698569318, 90.1830465708, 73.4254987403, 78.3999210398, 70.2358459167, 62.3979033697, 65.480736613, 59.2214409804, 56.177651345, 56.6877775774, 41.7216966803, 40.8367430646, 26.0761781055, 27.684138191, 15.4398223528], 'C': [68.9835427034, 60.9425134615, 70.4696912332, 64.4983705958, 68.4840983508, 55.8574904073, 43.3437141895, 38.8146218031, 45.5167426348, 47.2610840797, 48.0018546991, 43.7504690525, 45.2503569109, 40.9299893929, 30.4879370187, 33.7381587517, 24.9250258499, 41.0744103558, 35.7208917027, 38.5822551208, 43.3819614994], 'TMUS': [77.56, 69.1, 70.49, 61.04, 62.39, 64.74, 46.9, 38.43, 40.54, 32.38, 28.87, 32.6, 26.07, 14.6277822908, 16.0368805849, 12.4000649878, 12.6416246954, 21.2169943136, 13.9567831032, 9.3671486596, 12.9100243704], 'QCOM': [76.63, 56.0721500629, 68.9680901681, 52.2668332208, 47.8129973749, 52.1065167822, 56.5327075559, 44.4596022253, 45.2037756164, 56.7884296256, 62.6224621516, 65.6924624192, 55.3046818406, 54.3540543532, 51.1591243017, 54.2760211919, 40.9298000409, 42.2637290697, 34.7025679892, 32.165116108, 34.7594572484], 'CSX': [68.91, 74.3132136886, 73.2401809238, 54.6363142062, 52.3847774283, 45.6572885943, 28.3504051042, 24.4533676912, 24.2165653186, 30.5765492651, 29.2694345796, 25.817051579, 23.0951655776, 21.7430388532, 18.3883790105, 18.5692305703, 16.6518101833, 22.5223183773, 15.596216283, 14.2505249586, 11.801507155], 'BLK': [446.13, 420.8340149338, 463.307912258, 519.0215396353, 415.7672061873, 355.5382988353, 334.9116757882, 310.765466565, 265.3557096045, 322.019125551, 289.0698650217, 270.442350224, 232.9339578299, 216.681622214, 148.7586655775, 163.061801042, 122.6248534599, 147.6839504433, 129.7308206004, 169.8348150691, 163.9379868212], 'UPS': [118.0341927981, 108.9122613574, 111.8744396885, 98.7835465807, 110.2024822406, 97.0012327318, 99.1827800844, 94.2612242158, 85.1246996267, 83.3237853369, 83.6659626634, 81.7383174135, 75.6271531814, 70.1900765033, 57.9405720546, 63.2930288258, 49.9867151142, 56.796158768, 50.8818921212, 47.95477887, 41.778881927], 'BERK': [13.1, 13.1, 13.22, 12.16, 11.55, 10.3, 8.02, 7.75, 7.653125, 8.383875, 8.2668677326, 7.0761264535, 7.500319, 8.060188, 8.180682, 6.642025, 6.336206, 5.915703, 3.822748, 5.820135, 6.288421], 'ANTM': [237.69, 285.2457653842, 268.5997459552, 215.9380841066, 182.0920122599, 159.98830006, 121.4560769092, 133.5598477025, 128.5419735072, 146.1738532639, 111.0358987593, 91.5398575903, 76.6314214261, 59.9037259252, 51.9438069426, 63.4860620753, 58.9622829206, 60.5386080616, 48.6022419582, 55.8299554634, 42.8618196797], 'MA': [268.7978649963, 234.5460715282, 220.8182347089, 173.5112791326, 137.9274146878, 110.2462419018, 99.4186921329, 90.5422068736, 85.8995267215, 84.5318873148, 71.3737216386, 70.4871969903, 65.4949779857, 51.8672435257, 43.2881019376, 40.9390919607, 32.2950975596, 24.0173781754, 21.1896944627, 23.6016135181, 19.6486811191], 'MO': [40.13, 55.4381326915, 56.8781559949, 56.8772149259, 57.6230609523, 64.0662647084, 54.6614649882, 52.5805830864, 45.4452875388, 40.9903986193, 36.6575846912, 28.9309316643, 26.3661848861, 25.450496691, 24.4292145639, 21.4916201475, 18.0640976483, 17.2393690446, 15.4636527886, 12.8635261508, 10.7786921181], 'MDLZ': [55.39, 49.4270056086, 42.1464512336, 40.3729896321, 38.6309310429, 41.4799854877, 40.3944388609, 37.3786774049, 38.3500165008, 32.6221584278, 31.1855986795, 31.0571895812, 28.478623222, 27.1766518625, 23.7584146825, 21.4815240039, 19.3785666114, 17.2035770665, 17.0197802914, 16.1832436816, 13.5157512358], 'MS': [42.5183093757, 41.3018163377, 46.1168601481, 51.538964801, 45.4859709961, 40.1011844012, 29.0673152175, 22.6947811595, 28.180031965, 32.2223707046, 30.9075732041, 27.4593777365, 23.9759985292, 19.3797341571, 14.8162929847, 17.2535307741, 13.0156821105, 23.5765215801, 21.453195218, 25.2980993781, 26.6360965334], 'TJX': [54.6150536901, 52.5345772422, 54.7775531981, 39.6193975019, 35.7140966843, 38.0548740225, 35.6838884651, 37.0417821945, 32.3582622779, 32.3924490362, 27.396786895, 27.6559316315, 25.8619864339, 21.2916701712, 20.4088855806, 17.6733616414, 12.9357332224, 11.004810656, 9.9084147798, 9.5011709151, 8.0721756646], 'COP': [57.4580955842, 65.57447947, 75.5053083183, 57.2798673062, 47.9955432592, 43.4045624097, 36.8314720248, 36.5739003909, 41.4403552765, 55.4840965079, 66.0747866115, 59.7032257431, 58.4721303581, 48.9436777888, 45.1714726677, 44.7413900662, 37.2225145717, 44.8494177789, 31.4512983649, 28.0068056313, 24.2639792669], 'NEE': [231.26, 191.0289266604, 161.5276743794, 157.2100440147, 138.8875069568, 122.3150557663, 117.0133246671, 108.2670154061, 87.4065492496, 91.3784640212, 81.667217194, 81.1764026703, 67.5518251216, 64.4445266255, 57.1515413579, 48.4993343813, 42.7893328447, 42.0591092212, 41.2230689842, 35.9286256988, 39.988860343], 'PEP': [135.6, 120.8210680146, 107.7567813807, 104.0915982826, 104.4466168865, 104.245142714, 98.2473796053, 91.3284294336, 82.1390372879, 83.9629212602, 80.3803646237, 70.5936512683, 67.3168493598, 65.4738876174, 57.6062962, 53.0195016316, 49.3325561209, 49.9317359685, 50.888526482, 50.2716156399, 43.5814187406], 'AMGN': [193.6548761082, 185.7761777336, 201.3125743927, 161.9691059957, 173.2017189902, 150.6508198462, 156.4200972486, 134.5828167648, 117.6019472917, 143.2030542553, 122.6159065671, 104.1561700071, 96.903396916, 86.9962156939, 70.8005156655, 56.0496906604, 46.5801944693, 43.7944388701, 45.6468706846, 49.105836285, 49.5566493372], 'COST': [285.3257808302, 240.4411150963, 231.1743671607, 185.1561129913, 160.672636493, 156.2918817821, 139.6376199018, 143.2927804053, 131.7913466566, 137.3879039014, 110.1600231, 97.5570581008, 100.5788703373, 91.7352569736, 80.5046092582, 71.6656840284, 66.8904520179, 56.6874443871, 49.9459052374, 46.8056860344, 43.6952965803], 'VZ': [59.6802206067, 57.3125107818, 50.8429020981, 44.2902690375, 44.7957577873, 43.3528410834, 45.3004931639, 45.7005692442, 36.0651118056, 39.1340146865, 39.3780896531, 36.5501818213, 35.4271197819, 36.3003656197, 33.0359661882, 26.8222144358, 25.3024876724, 25.5963783596, 21.3626630006, 17.9136419776, 17.2047174514], 'MSFT': [137.73, 117.1089835311, 112.6246899197, 89.1113888874, 71.4100015344, 62.6196177581, 54.7316663122, 50.986378853, 39.790917436, 37.1709016573, 41.5000593183, 35.6072048508, 28.9568161222, 24.5517732831, 25.4597024349, 26.7583019001, 21.0868046626, 20.6727169015, 19.8171865285, 23.4784992798, 20.2505957108], 'IBM': [141.5742990453, 136.2343229973, 142.7549837868, 141.4651334645, 131.6361164689, 154.0415756534, 136.5095431014, 127.7034121359, 119.5206429284, 132.3936701494, 154.5401562099, 153.2427337462, 148.7999018494, 168.1688173339, 160.9432299864, 161.4146148925, 136.649215714, 124.1319391745, 101.7658938323, 96.1982768804, 88.0902254808], 'XOM': [70.6119430486, 77.9479903814, 81.0140322204, 69.0559936623, 73.9238996161, 73.0537583035, 72.8239447622, 72.7022022533, 61.3311016692, 69.3643503567, 76.9198873401, 78.8170849189, 69.1423705591, 70.712575957, 71.1167706942, 65.8045523594, 55.1065612514, 62.1300013979, 45.5280241966, 48.9588421853, 49.6344883389], 'BSX': [40.31, 38.38, 38.34, 27.32, 28.86, 24.71, 23.72, 18.55, 15.88, 17.83, 11.81, 13.2, 11.52, 7.81, 5.66, 6.0, 6.09, 7.31, 5.73, 7.19, 10.68], 'BDX': [248.03, 248.1919228897, 256.7414137137, 212.672265671, 189.1548199631, 177.9040750111, 171.7146078986, 144.2749416207, 123.0854207473, 135.2928182484, 105.5994976354, 106.2169166821, 90.9397688994, 86.1693316574, 70.1185140584, 67.8367968454, 66.1930128969, 68.4140401021, 63.2325312268, 66.5945562812, 58.759542987], 'MDT': [107.32, 90.128278463, 95.6237616168, 77.6634551023, 74.058583211, 76.8008764867, 81.1146758206, 69.94923012, 59.1997142016, 70.2583232102, 55.52141957, 53.6412740106, 46.5893037633, 40.8322047786, 37.3517043125, 33.2545080977, 28.8338192355, 32.4312035262, 27.2531451517, 36.3868654767, 29.6844760028], 'UNP': [162.69, 165.3446437112, 160.2914185662, 130.2009612412, 111.7528446148, 100.0292498637, 88.8278435335, 73.8148766324, 77.5518837529, 97.8216890235, 96.9510704286, 81.843066728, 68.6791358717, 61.8677063181, 50.9346532973, 45.6916940311, 36.0304135932, 41.1560326359, 33.7289996692, 30.1180910092, 24.0096065356], 'CI': [149.48, 160.82, 206.2994178208, 167.698882216, 184.3422570511, 147.1599550271, 131.6027657459, 137.9680627679, 132.8638692368, 128.8479838659, 90.5669383417, 79.3022447206, 77.50571469, 62.2541072146, 46.9011841616, 48.8462566651, 44.0782721032, 42.6133148346, 35.4855676272, 36.1924911124, 28.4426599708], 'DUK': [95.2401479904, 87.1762457068, 74.8581124685, 71.7788414415, 76.1162751245, 73.2188941054, 70.7252405528, 68.422459944, 58.5813315182, 61.0393373318, 59.6726742488, 54.9920164295, 51.09780261, 54.2497282799, 46.7596343765, 44.7471582684, 41.5679846774, 36.695286089, 35.416360719, 31.89682044, 29.6094659301], 'ADP': [160.43, 158.1971928954, 146.8470600268, 110.0773972982, 105.2107473813, 96.9464833972, 83.4861711535, 82.9410707986, 72.0180528238, 76.5905208561, 65.338306049, 59.8064121873, 55.702856135, 49.311928313, 43.6690168833, 40.5451182648, 34.8679393967, 36.2459984613, 29.6917668869, 30.8885857154, 26.8810966356], 'CL': [72.7932375167, 67.2872547999, 64.6343278723, 68.5741168334, 69.171325648, 68.8682119911, 68.0028551899, 64.5721830997, 56.2675794167, 61.5427176047, 57.7496424186, 56.1631929943, 51.9508614001, 50.5767019761, 45.4770823005, 40.4644487726, 37.6333282776, 32.7781126344, 31.7371127867, 33.7389116183, 30.057225761], 'GILD': [62.9, 63.7986335404, 73.8046858355, 71.5302745468, 78.4515321401, 62.0306953884, 72.0793002546, 82.8866879358, 84.4594573345, 89.3043482915, 94.1232462934, 60.6120106474, 56.1821612915, 43.2728198553, 29.4638034252, 21.1191520687, 17.7061344014, 18.5903358696, 15.8537323254, 20.2835816813, 20.5488421217], 'CB': [160.51, 138.7236919948, 130.6068979772, 132.4677149969, 135.4066389067, 129.6126554076, 117.1028202639, 111.0135912742, 92.3037301912, 99.0387717925, 91.6883262938, 83.7343089011, 78.8925691529, 72.9183343962, 60.5765700299, 57.2315820065, 46.1722523667, 47.5291815575, 41.7527954896, 37.4718709864, 36.9951168872], 'V': [173.7100805332, 155.473165825, 148.8088774097, 118.2862233675, 102.3756721887, 87.5824818804, 80.3708354752, 73.4779223059, 65.2623040293, 63.4355915857, 51.4387381279, 50.9365226445, 46.1887260123, 40.4869952576, 31.7790350541, 28.0913111897, 21.0329386075, 16.9091902991, 17.0278980545, 20.9829362755, 16.1273078435], 'UNH': [215.26, 245.043591874, 260.4535691635, 209.1706840966, 188.8478959764, 157.4456557825, 134.5920798183, 122.982577974, 105.8671127532, 109.9150231837, 79.7704870031, 74.8121011376, 65.4990888815, 51.6332049159, 50.3618861805, 51.6387668639, 43.6689818007, 39.0111493817, 30.815556239, 28.3817559254, 22.1937725994], 'JPM': [116.7831532408, 98.9672594417, 110.2800257684, 104.8052048039, 89.728801826, 82.2970719158, 61.0895351008, 53.5214246676, 53.62125622, 52.544345255, 52.4584828555, 51.599347549, 44.281680022, 39.6882676385, 33.5452293462, 37.1027083743, 25.2569215774, 36.4009222996, 30.8369724751, 35.3097508771, 35.2422258236], 'LMT': [387.87, 296.5236592629, 336.9765403534, 324.9618696261, 294.6989363749, 251.7517854396, 227.5798084504, 201.6197575701, 180.1663014425, 179.2319559783, 159.5307380282, 137.9328940701, 109.1249069735, 79.8802626597, 74.6144977421, 70.6901619104, 57.1755888034, 60.6476436907, 53.5364695915, 61.6974627887, 56.5714489605], 'SBUX': [87.9372793503, 73.3589879641, 55.9883498413, 55.8396898655, 52.4741688498, 54.4337147493, 50.8009530416, 55.4325241582, 51.5752206076, 43.6986061609, 34.418119846, 33.377211271, 34.7805796395, 25.4546735536, 22.6314882273, 24.5420371275, 17.4200783167, 15.9941769659, 11.2524890638, 10.4916979598, 8.6883707607], 'PLD': [85.78, 71.0265984686, 64.6219836116, 60.3626608768, 59.4353674254, 47.1604088227, 49.3392598298, 39.4792434335, 33.5774414763, 37.2685047471, 32.1156115471, 33.9729314284, 31.5904805525, 32.49577186, 27.8301136571, 27.8072382066, 20.316086345, 26.5611432522, 18.8934719096, 20.6867973268, 16.4036796882], 'SO': [61.1603629417, 50.0473586417, 40.8403268263, 41.0727569179, 43.5457225645, 43.7827905392, 45.2509889412, 42.9032111517, 36.0868451962, 35.1611854633, 34.1045798594, 33.0955477815, 30.696020815, 34.1698900922, 32.7267498674, 31.2886698347, 28.8895571289, 25.1397598587, 24.4265595445, 21.1526710257, 19.7371630766], 'CMCSA': [44.5996244131, 39.3917137254, 34.326502436, 32.9265487939, 36.8345755985, 35.2908220338, 31.1164269195, 28.3210500642, 25.3313652374, 25.6331013416, 24.5446481598, 22.3306777582, 19.9969546359, 18.5862041786, 15.7011709913, 12.9521005725, 9.5968076436, 10.4456117363, 7.72597392, 7.7253319722, 7.1858252659], 'LOW': [109.0069350557, 107.9002601931, 111.723018066, 84.7934537625, 75.8852196485, 77.9830873093, 67.1623508793, 70.5217307362, 62.0916669767, 67.6216152449, 48.204171843, 44.1759091314, 42.8144685269, 33.7068209058, 26.6516893054, 27.1964427779, 17.4270921561, 22.9485449352, 18.7961434332, 20.3361076241, 17.6011862583], 'ADBE': [277.54, 266.49, 269.91, 216.08, 146.43, 129.58, 109.7, 93.22, 80.52, 73.31, 69.19, 64.88, 52.03, 43.515, 32.82, 34.48, 25.56, 32.62, 26.88, 35.74, 32.68], 'USB': [55.43, 47.4895677435, 51.3418231666, 48.3523558553, 50.9674222992, 48.4475068104, 39.4731254465, 36.9227021005, 36.504414705, 38.2462623813, 36.9168919705, 36.9045379179, 31.4925441179, 28.9069619084, 28.7602345392, 26.2482548071, 19.7056241858, 21.7087073066, 17.6505582204, 20.9157944896, 17.4511686682], 'CVX': [117.4415497004, 119.558425462, 116.5677535176, 106.5983246558, 107.6887526172, 97.0951503333, 87.2135058979, 82.2450730277, 63.8155118984, 85.8621853853, 96.4197101574, 94.1378285024, 95.7637717951, 91.2737088178, 88.5557905014, 79.3812976237, 68.4126264198, 77.3049034144, 56.7361817214, 52.3263680906, 48.4347794143], 'CVS': [61.610408472, 52.5472093463, 75.6326075608, 58.8359962228, 76.0743551984, 72.6039096751, 82.5709507972, 92.6382062358, 86.4218848572, 91.3309567897, 70.4323596826, 65.2357572035, 50.3835123842, 47.5739349918, 41.4103947467, 37.7425638599, 29.3444892101, 28.3960863135, 25.5512121137, 30.7820543907, 29.8143290459], 'CAT': [125.6002649157, 132.6263023235, 147.3486988839, 140.8396529246, 117.7527416915, 86.4748514541, 75.875123661, 68.2527806178, 55.9448093918, 68.6654322648, 84.0178040874, 83.2999317841, 69.2944452312, 70.9572637837, 70.086078088, 84.5891955035, 61.3626341518, 86.608335306, 61.6920336086, 48.596900499, 38.9496614038], 'BAC': [29.35, 27.2678096083, 29.2714430419, 29.0583780571, 24.4231181059, 22.2563767925, 14.4797177615, 12.6076130316, 14.4385553096, 14.2023441517, 15.7212257886, 15.5981126037, 12.7532156339, 11.1587968046, 8.2028234737, 8.6919078984, 5.8918956762, 12.1127805744, 11.9936717267, 16.3191967725, 15.5037549552], 'DIS': [129.96, 110.3483115886, 114.4283116335, 98.2572725995, 96.3072012134, 108.3864364838, 87.6811468465, 93.1654023197, 92.8832060238, 98.9082759465, 82.4497309893, 73.1517943485, 59.6352075764, 51.9601133662, 47.3754489046, 38.7527207567, 27.6046065596, 38.0404944053, 29.1739450337, 30.8127337754, 24.2146608209], 'TXN': [126.1759255203, 103.9574438544, 103.5092574695, 99.0850845412, 83.6871818068, 74.9180109673, 63.7611649543, 52.0864952088, 42.0100902467, 50.1351989995, 41.567507, 40.1283366867, 34.0655593421, 29.6467102547, 23.1432901093, 27.2408541836, 22.7651680728, 28.1684879432, 21.3218106344, 19.5808369869, 18.4554765621], 'ISRG': [533.73, 570.58, 569.69, 412.83, 341.35965864, 255.22641144, 240.06309327, 201.02313231, 154.50317883, 165.74983425, 153.93984606, 144.99652167, 122.48654418, 163.72983627, 166.55316678, 181.22648544, 129.36320397, 111.76322157, 96.75323658, 115.92988407, 85.52991447], 'KO': [54.31, 46.1559927641, 44.5706506306, 41.3463566346, 41.7852767705, 39.0701301834, 38.5564562227, 41.4113484644, 34.68337772, 34.5796378636, 36.2589138735, 32.6204897445, 31.6861461459, 32.9000876259, 30.7340487999, 29.2077533165, 27.1387928529, 25.2812697471, 22.2257654462, 20.4426548845, 19.5952026989], 'ORCL': [53.8529797334, 53.0207875299, 50.6229731466, 44.4472185688, 46.4251213351, 42.5713625285, 37.2896869516, 38.3345607023, 33.1104382051, 39.5496923843, 35.2998120926, 36.2737347698, 30.7564584256, 29.3235687501, 28.0984623158, 26.2663045607, 26.8965884452, 29.4955441805, 23.8890975775, 22.5743838115, 18.5642437844], 'CELG': [98.85, 94.34, 89.25, 89.21, 142.97, 124.09, 107.4, 100.15, 104.79, 118.68, 94.78, 69.645, 77.305, 57.955, 38.37, 38.76, 31.985, 27.745, 28.82, 31.24, 27.555], 'INTC': [50.5038073038, 52.7277880518, 44.4843292602, 49.9066395123, 35.5273957419, 33.1690688518, 34.1635193334, 29.2738105813, 25.5928249563, 28.0370930848, 30.0909472045, 21.8022388994, 19.1906475073, 17.8892316225, 18.5236799313, 22.240211131, 17.5109773783, 15.4855606505, 14.4540969336, 16.5358405176, 14.203856343], 'HON': [167.2023594572, 156.5614385955, 154.4454987724, 133.645541164, 127.8044836128, 113.6060809847, 104.1898919674, 99.2928243556, 80.3398075406, 89.4378695954, 80.0629373655, 77.3907084513, 70.4659685462, 62.8836011907, 49.6358679774, 49.3779306122, 36.2385318513, 47.2398556446, 34.3346752458, 34.6565796243, 28.3316073335], 'INTU': [262.6626847617, 259.962113705, 220.6032721846, 170.9103126928, 141.6093409186, 115.0028826745, 106.776630381, 98.9195235139, 82.6156385602, 92.5419456189, 83.087140883, 73.3622690735, 62.4035899687, 61.2770249879, 54.6046684425, 55.2459963353, 44.7644355651, 47.4996830119, 41.2673574535, 31.5012390526, 25.929778649], 'ABT': [81.512435272, 78.9935551497, 71.5299647552, 58.1596777726, 50.1358120151, 42.452859013, 39.7191545354, 38.4420611593, 35.7660389672, 42.4104808767, 37.3059134004, 33.9797640045, 29.1085734315, 30.7854272124, 28.7005300814, 24.8391720553, 20.4884421344, 19.0046474273, 20.1120102473, 20.1486427708, 18.3422988819], 'UTX': [135.7165030737, 126.8071086179, 135.8441798706, 121.045647504, 111.4678575985, 105.3871471961, 95.1041598767, 91.8611835159, 78.5833649457, 104.5457395787, 93.4237321392, 100.5017929085, 94.7127840408, 80.0593668241, 66.2636077274, 68.705371784, 60.3253663568, 68.5355321214, 57.1557891495, 58.9436574563, 48.2593640656], 'WMT': [118.45, 96.54195208, 92.1705734814, 86.0707342805, 75.8554335989, 66.8112475732, 67.340512312, 62.4416468254, 57.5181603177, 72.5568911395, 67.4117431076, 66.1681573985, 63.9432123832, 63.5769727787, 62.1083036294, 50.4487182535, 42.6067113431, 42.1956426525, 42.6467593668, 43.9337346181, 38.3914923317], 'DHR': [141.56, 131.7052787375, 107.6113589659, 97.0939817611, 84.3422260181, 84.3607269977, 76.1188163843, 71.2907709733, 61.3752801357, 63.1004263733, 56.3490574667, 54.6450836957, 51.5989673216, 45.8631827401, 40.8837306394, 40.5356252698, 32.5436996472, 38.1775118628, 29.9706800598, 28.388726393, 24.6972024273], 'PFE': [35.8701422055, 41.3017443205, 42.0076818383, 33.3478816501, 32.7082535617, 31.0689421623, 30.0100770512, 26.1952076006, 26.3811338159, 29.0841676102, 24.4789823802, 25.9265453707, 23.1101326837, 22.7162890983, 19.300923721, 17.012226762, 13.1995489156, 14.8449890537, 12.2493793925, 12.0679016289, 11.4909995757], 'NKE': [92.31, 83.752465891, 83.6240743253, 65.380942157, 51.5015728489, 55.0449049601, 53.3869864534, 58.9851836922, 58.2884699254, 47.415528467, 42.101951739, 34.4967456955, 34.3296371744, 27.3267407568, 22.0956280316, 24.6499428541, 20.5566190319, 17.2019094136, 17.6976649925, 16.4265499011, 13.2358894895], 'MCD': [213.16, 187.7960129098, 162.6514416667, 150.8356436065, 146.7808423181, 121.2931388801, 108.3809984479, 113.2435757147, 86.3231306692, 85.7041061249, 82.3663016341, 83.092556956, 81.6079371523, 82.4390298845, 75.839364874, 78.1586490499, 70.8041214958, 58.6312009478, 57.2378402256, 50.5511220969, 42.3581233262], 'CSCO': [48.4794431555, 52.9254261924, 46.680976017, 40.7812033793, 31.3271670986, 31.0097089694, 28.4499903996, 24.93399641, 22.4064157113, 23.3315077922, 21.4979891008, 18.6335486221, 19.1784402753, 16.920867776, 14.9974452458, 16.6386945679, 12.6249629357, 13.6490048936, 17.2445427541, 20.6762925559, 18.1726750869], 'BKNG': [1944.25, 1744.91, 1969.34, 2080.39, 1818.99, 1785.05, 1453.49, 1307.89, 1199.14, 1135.19, 1158.58, 1192.01, 1014.97, 688.162, 630.52, 720.04, 511.12, 491.69, 345.16, 255.67, 167.0], 'SPGI': [246.35, 209.5276814045, 201.8976456592, 188.1319072107, 151.6234149861, 124.9946488188, 122.8280508153, 95.7045369651, 81.6813286229, 98.489221193, 79.6011152378, 70.1701481018, 61.2059862465, 47.8802658316, 47.6344697069, 40.9063194259, 37.0841899204, 33.6289781218, 27.2076010333, 29.0315440029, 20.9793236797], 'PNC': [139.2579019704, 119.8032461734, 132.0930600998, 143.7465994464, 126.3374385952, 111.0637542774, 81.5166645245, 76.7881716224, 78.4911410677, 81.8254296948, 75.2110029595, 74.4903161789, 62.3730234404, 56.3945616458, 53.4314092865, 52.8405751943, 40.1384324166, 50.0150449513, 41.3557118525, 47.6325540541, 38.2839285004]}
    for i in range(0,100):
        new_price = price_data(factorNames[i], factors[factorNames[i]])
        price_data.save_to_mongo(new_price)

    return render_template('home.html')


@app.route('/login')  #127.0.0.1:5000/login  define route
def login_template(): # defined the method, access the end point
    return render_template('login.html')

@app.route('/register')  #127.0.0.1:5000/register
def register_template():
    return render_template('register.html')

@app.before_first_request
def initialize_database():
    Database.initialize()

@app.route('/auth/login', methods=['POST'])   #define a new end point to login user, get the email and passwords and log user in
def login_user():
    email = request.form['email'] #website is going to make a request to form from login.htmal for email and password (from Id)
    password = request.form['password']

    if User.login_valid(email, password):
        User.login(email)
        return render_template("choose_extract.html")  # give a render_template with data you want, by variable email.
    else:
        return render_template('login_wrong_password.html')



@app.route('/auth/register', methods =['POST'])
def register_user():
    email = request.form['email']
    password = request.form['password']
    if User.duplicate_register(email):
        return render_template('register_duplicate_address.html')
    else:
        User.register(email, password)
        return render_template("choose_function.html", email=session['email'])

@app.route('/extract_existing_info', methods = ['POST'])
def extract_existing():
    answer_q17 = request.form.get('q17')
    if(answer_q17 == 'Yes'):
        if Survey.survey_not_empty(session.get('email',None)):
            existing_survey = Survey.get_by_email(session.get('email', None))
            answer_q9 = existing_survey[0].get('name')
            answer_q13 = existing_survey[0].get('num_asset')
            answer_q14 = existing_survey[0].get('inv_time')
            answer_q15 = existing_survey[0].get('reb_time')
            answer_q1 = existing_survey[0].get('age')
            answer_q2 = existing_survey[0].get('gender')
            answer_q3 = existing_survey[0].get('employment')
            answer_q4 = existing_survey[0].get('house')
            answer_q5 = existing_survey[0].get('car')
            answer_q6 = existing_survey[0].get('education')
            answer_q7 = existing_survey[0].get('income')
            answer_q8 = existing_survey[0].get('protect')
            return render_template("existing_results.html", existing_survey = existing_survey,
                                   answer_q9 = answer_q9,answer_q13 = answer_q13,answer_q14 = answer_q14,answer_q15 = answer_q15,answer_q1 = answer_q1,
                                   answer_q2 = answer_q2,answer_q3 = answer_q3,answer_q4 = answer_q4,answer_q5 = answer_q5,answer_q6 = answer_q6,
                                   answer_q7 = answer_q7,answer_q8 = answer_q8)

        else:
            return render_template("force_input_survey.html")

    else:
        return render_template("choose_function.html")

@app.route('/directed_choose_function',methods =['POST'])
def directed_choose_function():
    return render_template("choose_function.html")


@app.route('/existing_choose_function', methods= ['POST'])
def existing_choose_function():
    return render_template("existing_choose_function.html")



@app.route('/choose_function',methods = ['POST'])
def choose_function():
    answer_q16 = request.form.get('q16')
    session['answer_q16'] = request.form.get('q16')
    return render_template("survey.html", answer_q16 = answer_q16)

@app.route('/survey/confirm', methods =['POST'])
def confirm_survey():
    answer_q9 = request.form.get('name')
    answer_q13 = request.form.get('assets')
    answer_q14 = request.form.get('horizon')
    answer_q15 = request.form.get('rebalance')
    answer_q1 = request.form.get('q1')
    answer_q2 = request.form.get('q2')
    answer_q3 = request.form.get('q3')
    answer_q4 = request.form.get('q4')
    answer_q5 = request.form.get('q5')
    answer_q6 = request.form.get('q6')
    answer_q7 = request.form.get('q7')
    answer_q8 = request.form.get('q8')

# delete q10, q11


    rw = User.find_risklevel(answer_q1, answer_q2, answer_q3,answer_q4,answer_q5,answer_q6,answer_q7, answer_q8)

    #Save to database, using survey Object

    new_survey = Survey(session.get('email',None), answer_q1,answer_q2,answer_q3,answer_q4,answer_q5,answer_q6,answer_q7,
                        answer_q8,answer_q9, answer_q13, answer_q14,answer_q15, rw)

    #need to get num_assets, inv_time, reb_time, risk_measure,return goal (starting from answer_q_13, the userf info beforehand is only for storage purpose)
    if(Database.find_one("surveys", {"email":session.get('email',None)})):
        Database.replace_data('surveys', {"email": session.get('email', None)}, Survey.json(new_survey))
    else:
        Survey.save_to_mongo(new_survey)


    return render_template("survey_results.html", answer_q1=answer_q1, answer_q2=answer_q2, answer_q3=answer_q3,
                           answer_q4=answer_q4, answer_q5=answer_q5, answer_q6=answer_q6, answer_q7=answer_q7,
                           answer_q8=answer_q8, answer_q9=answer_q9
                           , answer_q13 = answer_q13, answer_q14 =answer_q14, answer_q15=answer_q15,  rw = rw)


@app.route('/portfolio', methods=['POST'])
def portfolio_options():
    if (session.get('answer_q16', None) == "Get the risk and return profile for given portfolio"):
        return render_template("given_portfolio_ask.html")
    elif (session.get('answer_q16', None) == "Get the optimal portfolio without return"):
        stock = ['AAPL', 'MSFT', 'GOOG', 'GOOGL', 'AMZN']
        weight = [0.5, 0.2, 0.1, 0, 0.1]

        num_asset = Database.find_one("surveys", {"email": session.get('email', None)})['num_asset']
        inv_time = Database.find_one("surveys", {"email": session.get('email', None)})['inv_time']
        inv_time = float(inv_time)

        sr = 1.5  # input sharpe ratio from portfolio
        # sp500_sr_1y = 5.4
        # sp500_sr_3y = 1.07
        # sp500_sr_5y = 0.83
        # sp500_sr_10y = 1.04
        sp500_sr_input = 0
        if (inv_time <= 3):
            sp500_sr_input = 5.4 - ((5.4 - 1.07) / (3 - 1)) * (inv_time - 1)
        elif (inv_time >= 10):
            sp500_sr_input = 1.07 - ((1.07 - 0.89) / (5 - 3)) * (inv_time - 3)
        else:
            sp500_sr_input = 0.89 + ((0.89 - 1.04) / (10 - 5)) * (inv_time - 5)

        if (sr >= sp500_sr_input):
            return render_template("function2_results_outperform.html", weight=weight, stock=stock, sr=sr,
                                   inv_time=inv_time,sp500_sr_input=round(sp500_sr_input,2))
        else:
            return render_template("function2_results_underperform.html", weight=weight, stock=stock, sr=sr,
                                   inv_time=inv_time, sp500_sr_input=round(sp500_sr_input,2))
    elif (session.get('answer_q16', None) == "Get the optimal portfolio with return"):
        return render_template("portfolio_with_return_ask.html")
    else:
        pass

@app.route('/existing_portfolio',methods = ['POST'])
def existing_portfolio_options():
    e_answer_q16 = request.form.get('e_q16')
    if (e_answer_q16 == "Get the risk and return profile for given portfolio"):
        return render_template("given_portfolio_ask.html") #given_portfolio_ask.thml
    elif (e_answer_q16 == "Get the optimal portfolio without return"):
        stock = ['AAPL', 'MSFT', 'GOOG', 'GOOGL', 'AMZN']
        weight = [0.5, 0.2, 0.1, 0, 0.1]

        num_asset = Database.find_one("surveys", {"email": session.get('email', None)})['num_asset']
        inv_time = Database.find_one("surveys", {"email": session.get('email', None)})['inv_time']
        inv_time = float(inv_time)

        sr = 1.5  # input sharpe ratio from portfolio
        # sp500_sr_1y = 5.4
        # sp500_sr_3y = 1.07
        # sp500_sr_5y = 0.83
        # sp500_sr_10y = 1.04
        sp500_sr_input = 0
        if (inv_time <= 3):
            sp500_sr_input = 5.4 - ((5.4 - 1.07) / (3 - 1)) * (inv_time - 1)
        elif (inv_time >= 10):
            sp500_sr_input = 1.07 - ((1.07 - 0.89) / (5 - 3)) * (inv_time - 3)
        else:
            sp500_sr_input = 0.89 + ((0.89 - 1.04) / (10 - 5)) * (inv_time - 5)

        if(sr>=sp500_sr_input):
            return render_template("function2_results_outperform.html", weight=weight, stock=stock, sr=sr, inv_time = inv_time, sp500_sr_input=round(sp500_sr_input,2))
        else:
            return render_template("function2_results_underperform.html", weight=weight, stock=stock, sr=sr, inv_time = inv_time, sp500_sr_input=round(sp500_sr_input,2))

    elif (e_answer_q16 == "Get the optimal portfolio with return"):
        return render_template("portfolio_with_return_ask.html")
    else:
        pass



@app.route('/portfoilo/with_return',methods=['POST'])
def store_investor_expected_return():
    updated_survey = Database.find_one("surveys", {"email":session.get('email',None)})
    updated_survey["ret_goal"]= request.form.get('goal') #change 10 to user inputed return goal
    Database.replace_data('surveys',{"email":session.get('email',None)}, updated_survey)

    ret_goal = Database.find_one("surveys", {"email": session.get('email', None)})['ret_goal']
    stock = ['AAPL', 'MSFT', 'GOOG', 'GOOGL', 'AMZN']
    weight = [0.5, 0.2, 0.1, 0, 0.1]

    num_asset = Database.find_one("surveys", {"email": session.get('email', None)})['num_asset']
    inv_time = Database.find_one("surveys", {"email": session.get('email', None)})['inv_time']
    inv_time = float(inv_time)

    sr = 1.1  # input sharpe ratio from portfolio
    # sp500_sr_1y = 5.4
    # sp500_sr_3y = 1.07
    # sp500_sr_5y = 0.83
    # sp500_sr_10y = 1.04
    sp500_sr_input = 0
    if (inv_time <= 3):
        sp500_sr_input = 5.4 - ((5.4 - 1.07) / (3 - 1)) * (inv_time - 1)
    elif (inv_time >= 10):
        sp500_sr_input = 1.07 - ((1.07 - 0.89) / (5 - 3)) * (inv_time - 3)
    else:
        sp500_sr_input = 0.89 + ((0.89 - 1.04) / (10 - 5)) * (inv_time - 5)

    if (sr >= sp500_sr_input):
        return render_template("function3_results_outperform.html", weight=weight, stock=stock, sr=sr,
                               inv_time=inv_time, sp500_sr_input=round(sp500_sr_input, 2), ret_goal = ret_goal)
    else:
        return render_template("function3_results_underperform.html", weight=weight, stock=stock, sr=sr,
                               inv_time=inv_time, sp500_sr_input=round(sp500_sr_input, 2), ret_goal = ret_goal)




@app.route('/portfolio/input_weight_portfolio',methods=['POST'])
def input_weight_portfolio():
    input_portfolio = request.form.getlist('input_portfolio')

    session['input_portfolio'] = request.form.getlist('input_portfolio')
    return render_template("given_portfolio_ask_weights.html", input_portfolio = input_portfolio)

# add
@app.route('/portfolio/input_portfolio_confirm',methods=['POST'])
def input_confirm_portfolio():
    input_weight = request.form.get('input_weight')
    input_weight = input_weight.split(",")
    input_portfolio = session.get('input_portfolio',None)

    input_backtest_period = request.form.get('input_backtest_period')
    if (input_backtest_period == ""):
        input_backtest_period = 10
    session['input_backtest_period'] = input_backtest_period


    temp= 0
    given_portfolio = {}
    for i in input_portfolio:
        given_portfolio[i]= float(input_weight[temp])
        temp = temp + 1

    return render_template("given_portfolio_results.html", input_portfolio = session.get('input_portfolio',None),input_weight=input_weight,given_portfolio=given_portfolio)



@app.route('/function1/results', methods=['GET', 'POST'])
def function1_results():
    time = float(session.get('input_backtest_period',None))
    sr = 5.7#input sharpe ratio from portfolio
    # sp500_sr_1y = 5.4
    # sp500_sr_3y = 1.07
    # sp500_sr_5y = 0.83
    # sp500_sr_10y = 1.04
    sp500_sr_input = 0
    if(time<=3):
        sp500_sr_input = 5.4-((5.4-1.07)/(3-1))*(time-1)
    elif(time>=10):
        sp500_sr_input = 1.07-((1.07-0.89)/(5-3))*(time-3)
    else:
        sp500_sr_input = 0.89+((0.89-1.04)/(10-5))*(time-5)

    retr = 1
    risk = 2
    if(sr>=sp500_sr_input):
        return render_template("function1_results_outperform.html", retr = retr, risk = risk, sr = sr, sp500_sr_input =round(sp500_sr_input,2) ,time=time)
    else:
        return render_template("function1_results_underperform.html", retr = retr, risk = risk, sr = sr, sp500_sr_input = round(sp500_sr_input,2) ,time=time)

# @app.route('/function2/results', methods=['GET', 'POST'])
# def function2_results():


if __name__ == '__main__': #execute

    app.run(port=5000, debug=True) # need this to update





